{"version":3,"sources":["Common/constants/APIConstants.ts","Common/utils/APIUtils.ts","XMeme/services/endpoints.ts","XMeme/services/MemesService/index.api.ts","XMeme/stores/models/MemeModel/index.ts","XMeme/stores/models/MemeModel/MemeModel.ts","XMeme/stores/MemeStore/index.ts","XMeme/stores/MemeStore/MemeStore.ts","XMeme/constants/UIConstants.ts","XMeme/stores/UIStore/UIStore.ts","Common/stores/index.ts","Common/themes/colors.ts","Common/components/Button/constants.ts","Common/components/Button/utils.ts","Common/components/Button/styledComponents.ts","Common/components/Button/Button.tsx","Common/components/Button/index.tsx","XMeme/components/Header/styledComponents.ts","XMeme/components/Header/Header.tsx","XMeme/components/Header/index.tsx","Common/constants/RegexConstants.ts","Common/components/Input/constants.ts","Common/components/Input/styledComponents.ts","Common/components/Input/Input.tsx","Common/components/Input/index.tsx","XMeme/components/MemeForm/styledComponents.ts","XMeme/components/MemeForm/index.tsx","XMeme/components/MemeForm/MemeForm.tsx","assets/img/404.svg","XMeme/components/Meme/styledComponents.ts","XMeme/components/Meme/Meme.tsx","XMeme/components/Memes/styledComponents.ts","XMeme/components/Memes/index.tsx","XMeme/components/Memes/Memes.tsx","XMeme/components/XMemeHome/styledComponents.ts","XMeme/components/XMemeHome/index.tsx","XMeme/components/XMemeHome/XMemeHome.tsx","XMeme/components/MemeModal/styledComponents.ts","XMeme/components/MemeModal/index.tsx","XMeme/components/MemeModal/MemeModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["apiMethods","apiStatus","networkCallWithAxios","api","endpoint","requestData","a","type","setHeader","post","response","ok","Error","JSON","stringify","data","get","patch","delete","isFetching","status","isFailed","getParsedErrorMessage","error","description","undefined","parsedError","parse","message","err","endpoints","MemesAPIs","this","create","baseURL","id","MemeModel","action","bound","memeData","name","caption","url","deleteAPIStatus","observable","MemeStore","memesService","memes","singleMeme","postMemeAPIStatus","postMemeAPIError","unshift","onSuccess","onFailure","postMemePromise","postMemeAPI","setPostMemeAPIStatus","then","setPostMemeAPIResponse","catch","setPostMemeAPIError","getMemesAPIStatus","getMemesAPIError","forEach","meme","push","getMemesPromise","getMemesAPI","setGetMemesAPIStatus","setGetMemesAPIResponse","setGetMemesAPIError","getMemeAPIStatus","getMemeAPIError","getMemePromise","getMemeAPI","setGetMemeAPIStatus","setGetMemeAPIResponse","setGetMemeAPIError","editMemeAPIStatus","editMemeAPIError","updatedMemeData","find","updateCaption","updateURL","editMemePromise","editMemeAPI","setEditMemeAPIStatus","setEditMemeAPIResponse","setEditMemeAPIError","updateDeleteAPIStatus","deleteMemeAPIError","filter","deleteMemePromise","deleteMemeAPI","setDeleteMemeAPIStatus","deleteMeme","setDeleteMemeAPIError","NEW_MEME","EXISTING_MEME","UIStore","initStore","memeType","showMemeModal","memeId","mode","stores","memeStore","uiStore","colors","sizes","small","medium","large","variants","default","outline","text","primary","secondary","success","warning","danger","shapes","round","square","pill","defaultColor","getButtonColors","color","bgColor","colorCodes","hoverBgColorOne","hoverBgColorTwo","textColor","filledTextColor","defaultType","getSizeStyles","size","getVariantAndColorStyles","variant","css","getShapeStyles","shape","StyledButton","styled","button","disableShadow","disabled","IconContainer","div","StartIconContainer","EndIconContainer","Icon","i","Button","renderButtonStartIcon","startIcon","props","className","renderButtonEndIcon","endIcon","renderButtonChild","loading","children","onClick","other","Component","defaultProps","HeaderContainer","Title","h1","Description","p","Header","urlRegex","rectangle","getInputColorStyles","getTextColorStyles","LabelAndInputContainer","InputLabel","span","hasFocused","InputContainer","TextInput","input","fullWidth","TextArea","textarea","InputHint","Input","state","renderStartIcon","multiline","renderEndIcon","onFocus","setState","onBlur","renderInputOrTextArea","placeholder","onChangeInput","label","hint","rows","value","onChange","FormContainer","Form","form","FormInputContainer","FormInput","Message","ButtonsContainer","MemeSubmitButton","ExitMemeEditModeButton","MemeForm","inject","observer","initFormData","getMemeDetailsFromUIStore","reaction","onChangeName","event","target","onChangeCaption","onChangeURL","onSuccessPostingMeme","cogoToast","position","onFailurePostingMeme","match","onSuccessEditMeme","changeMemeTypeToNew","onFailureEditMeme","onSubmitMeme","preventDefault","clearStore","injectedProps","showButtonLoader","onSubmit","MemeContainer","MemeBar","MemeTitleBar","MemeOwnerName","MemeSubTitleBar","MemeCaption","MemeOptionsContainer","EditButton","DeleteButton","MemeImageContainer","MemeImage","img","Meme","editMeme","stopPropagation","updateMemeType","updateMemeDetails","onSuccessDeleteMeme","onFailureDeleteMeme","openMemeModal","updateMemeModalStatus","updateMemeId","editingMemeId","showLoader","disableDeleteButton","alt","src","onError","notFoundLogo","MemesContainer","memesEmpty","NoMemesMessage","Memes","totalMemes","length","firstHalfMemes","slice","Math","ceil","secondHalfMemes","map","AppContainer","FormAndMemesContainer","GetMemesErrorMessage","GetMemesTryAgainButton","XMemeHome","getMemes","renderMemes","LoaderContainer","ErrorInfoContainer","GetMemeErrorMessage","GetMemeTryAgainButton","CloseButton","MemeModal","getMemeDetailsAPI","getMemeDetails","closeMemeModal","clearSingleMeme","renderMeme","console","log","RenderMeme","isOpen","onRequestClose","overlayClassName","closeTimeoutMS","ariaHideApp","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAAaA,EACJ,OADIA,EAEL,MAFKA,EAGH,QAHGA,EAIF,SAGEC,EACD,IADCA,EAED,IAFCA,EAGF,I,yBCREC,EAAoB,uCAAG,WACjCC,EACAC,EACAC,GAHiC,6BAAAC,EAAA,sDAIjCC,EAJiC,+BAI1BP,EAJ0B,SAQ9BG,EAAIK,UAAU,eAAgB,mCARA,KAStBD,EATsB,cAUtBP,EAVsB,SAgBtBA,EAhBsB,UAsBtBA,EAtBsB,UA4BtBA,EA5BsB,mCAWPG,EAAIM,KAAKL,EAAT,eAAwBC,IAXjB,WAYJ,KADpBK,EAXwB,QAYXC,GAZW,uBAafC,MAAMC,KAAKC,UAAUJ,EAASK,OAbf,iCAejBL,EAASK,MAfQ,yBAiBPZ,EAAIa,IAAIZ,GAjBD,YAkBJ,KADpBM,EAjBwB,QAkBXC,GAlBW,uBAmBfC,MAAMC,KAAKC,UAAUJ,EAASK,OAnBf,iCAqBjBL,EAASK,MArBQ,yBAuBPZ,EAAIc,MAAMb,EAAV,eAAyBC,IAvBlB,YAwBJ,KADpBK,EAvBwB,QAwBXC,GAxBW,uBAyBfC,MAAMC,KAAKC,UAAUJ,EAASK,OAzBf,iCA2BjBL,EAASK,MA3BQ,yBA6BPZ,EAAIe,OAAOd,GA7BJ,YA8BJ,KADpBM,EA7BwB,QA8BXC,GA9BW,uBA+BfC,MAAMC,KAAKC,UAAUJ,EAASK,OA/Bf,iCAiCjBL,EAASK,MAjCQ,+HAAH,0DAyCpBI,EAAa,SAACC,GAAD,OAAoBnB,IAAsBmB,GAEvDC,EAAW,SAACD,GAAD,OAAoBnB,IAAqBmB,GAIpDE,EAAwB,SAACC,GACnC,IAEIC,EAFqB,0CAGzB,IACG,GAAc,OAAVD,QAA4BE,IAAVF,EAAqB,CACxC,IAAIG,EAAcb,KAAKc,MAAMJ,EAAMK,cACfH,IAAhBC,GAA6C,OAAhBA,GAC1BA,EAAYH,QACbC,EAAcE,EAAYH,QAIpC,MAAOM,IAET,OAAOL,GChEGM,EAAqB,SC6EnBC,E,WA1DZ,aAAe,yBAFf5B,SAEc,EACX6B,KAAK7B,IAAM8B,iBAAO,CACfC,QACG,sE,+CAIT,SACG7B,GAEA,OAAOH,EACJ8B,KAAK7B,IACL2B,EACAzB,EACAL,K,yBAIN,WACG,OAAOE,EACJ8B,KAAK7B,IACL2B,EACA,GACA9B,K,wBAIN,SAAWmC,GACR,OAAOjC,EACJ8B,KAAK7B,IADmB,UAErB2B,GAFqB,OAEHK,EAFG,KAGxB,GACAnC,K,yBAIN,SACGmC,EACA9B,GAEA,OAAOH,EACJ8B,KAAK7B,IADmB,UAErB2B,GAFqB,OAEHK,EAFG,KAGxB9B,EACAL,K,2BAIN,SAAcmC,GACX,OAAOjC,EACJ8B,KAAK7B,IADmB,UAErB2B,GAFqB,OAEHK,EAFG,KAGxB,GACAnC,O,0LCtEMoC,I,ECiBXC,KAAOC,M,EAKPD,KAAOC,M,EAKPD,KAAOC,M,aAlBR,WAAYC,GAAgC,yBAN5CJ,QAM2C,OAL3CK,UAK2C,sHAChCL,EAA2BI,EAA3BJ,GAAIK,EAAuBD,EAAvBC,KAAMC,EAAiBF,EAAjBE,QAASC,EAAQH,EAARG,IAC3BV,KAAKG,GAAKA,EACVH,KAAKQ,KAAOA,EACZR,KAAKS,QAAUA,EACfT,KAAKU,IAAMA,E,iDAGd,SACcD,GACXT,KAAKS,QAAUA,I,uBAGlB,SACUC,GACPV,KAAKU,IAAMA,I,mCAGd,SACsBtB,GACnBY,KAAKW,gBAAkBvB,M,2CAxBzBwB,M,gGACAA,M,4GACAA,M,8aCPWC,I,ECiCXR,KAAOC,M,EAKPD,KAAOC,M,EAKPD,KAAOC,M,EAYPD,KAAOC,M,EAqBPD,KAAOC,M,EAKPD,KAAOC,M,EAKPD,KAAOC,M,EAUPD,KAAOC,M,EAoBPD,KAAOC,M,EAKPD,KAAOC,M,EAKPD,KAAOC,M,EAQPD,KAAOC,M,EAqBPD,KAAOC,M,EAKPD,KAAOC,M,EAKPD,KAAOC,M,EAKPD,KAAOC,M,EAiBPD,KAAOC,M,EAsBPD,KAAOC,M,EAQPD,KAAOC,M,GAKPD,KAAOC,M,GAKPD,KAAOC,M,cAxMR,WAAYQ,GAA6B,yBAdzCA,kBAcwC,+eACrCd,KAAKc,aAAeA,EACpBd,KAAKe,MAAQ,GACbf,KAAKgB,WAAa,K,wDAGrB,SACqB5B,GAClBY,KAAKiB,kBAAoB7B,I,iCAG5B,SACoBG,GACjBS,KAAKkB,iBAAmB3B,I,oCAG3B,SAEGb,EACAL,GAEA,GAAIK,EAAU,CAAC,IACJyB,EAAOzB,EAAPyB,GACAK,EAAuBnC,EAAvBmC,KAAMC,EAAiBpC,EAAjBoC,QAASC,EAAQrC,EAARqC,IACvBV,KAAKe,MAAMI,QAAQ,IAAIf,GAAU,CAAED,KAAIK,OAAMC,UAASC,Y,gEAI5D,WAEGrC,GAFH,qGAGG+C,EAHH,+BAGyB,aACtBC,EAJH,+BAIyB,aAEhBC,EAAkBtB,KAAKc,aAAaS,YAAYlD,GACtD2B,KAAKwB,qBAAqBvD,GAP7B,SAQSqD,EACFG,MAAK,SAAC1C,GACJ,EAAKyC,qBAAqBvD,GAC1B,EAAKyD,uBAAuB3C,EAAMV,GAClC+C,OAEFO,OAAM,SAAC9B,GACL,EAAK2B,qBAAqBvD,GAC1B,EAAK2D,oBAAoB/B,GACzBwB,OAjBT,gD,yFAqBA,SACqBjC,GAClBY,KAAK6B,kBAAoBzC,I,iCAG5B,SACoBG,GACjBS,KAAK8B,iBAAmBvC,I,oCAG3B,SACuBb,GAAoD,IAAD,OACnEA,GACDA,EAASqD,SAAQ,SAACC,GAAU,IACjB7B,EAA2B6B,EAA3B7B,GAAIK,EAAuBwB,EAAvBxB,KAAMC,EAAiBuB,EAAjBvB,QAASC,EAAQsB,EAARtB,IAC3B,EAAKK,MAAMkB,KAAK,IAAI7B,GAAU,CAAED,KAAIK,OAAMC,UAASC,c,gEAK5D,kHAEGU,EAFH,+BAEyB,aACtBC,EAHH,+BAGyB,aAEhBa,EAAkBlC,KAAKc,aAAaqB,cAC1CnC,KAAKoC,qBAAqBnE,GAN7B,SAOSiE,EACFT,MAAK,SAAC/C,GACJ,EAAK0D,qBAAqBnE,GAC1B,EAAKoE,uBAAuB3D,GAC5B0C,OAEFO,OAAM,SAAC9B,GACL,EAAKuC,qBAAqBnE,GAC1B,EAAKqE,oBAAoBzC,GACzBwB,OAhBT,gD,uFAoBA,SACoBjC,GACjBY,KAAKuC,iBAAmBnD,I,gCAG3B,SACmBG,GAChBS,KAAKwC,gBAAkBjD,I,mCAG1B,SACsBb,GACnB,GAAIA,EAAU,CAAC,IACJyB,EAA2BzB,EAA3ByB,GAAIK,EAAuB9B,EAAvB8B,KAAMC,EAAiB/B,EAAjB+B,QAASC,EAAQhC,EAARgC,IAC3BV,KAAKgB,WAAa,IAAIZ,GAAU,CAAED,KAAIK,OAAMC,UAASC,W,+DAI3D,WAEGP,GAFH,qGAGGiB,EAHH,+BAGyB,aACtBC,EAJH,+BAIyB,aAEhBoB,EAAiBzC,KAAKc,aAAa4B,WAAWvC,GACpDH,KAAK2C,oBAAoB1E,GAP5B,SAQSwE,EACFhB,MAAK,SAAC1C,GACJ,EAAK4D,oBAAoB1E,GACzB,EAAK2E,sBAAsB7D,GAC3BqC,OAEFO,OAAM,SAAC9B,GACL,EAAK8C,oBAAoB1E,GACzB,EAAK4E,mBAAmBhD,GACxBwB,OAjBT,gD,oFAqBA,WAEGrB,KAAKgB,WAAa,O,kCAGrB,SACqB5B,GAClBY,KAAK8C,kBAAoB1D,I,iCAG5B,SACoBG,GACjBS,KAAK+C,iBAAmBxD,I,oCAG3B,SAEGY,EACA6C,GAEA,IAAMhB,EAAOhC,KAAKe,MAAMkC,MAAK,SAACjB,GAAD,OAAUA,EAAK7B,KAAOA,KACnD,GAAI6B,EAAM,CAAC,IACAvB,EAAiBuC,EAAjBvC,QAASC,EAAQsC,EAARtC,IACbD,GACDuB,EAAKkB,cAAczC,GAElBC,GACDsB,EAAKmB,UAAUzC,M,gEAKxB,WAEGP,EACA9B,GAHH,qGAIG+C,EAJH,+BAIyB,aACtBC,EALH,+BAKyB,aAEhB+B,EAAkBpD,KAAKc,aAAauC,YAAYlD,EAAI9B,GAC1D2B,KAAKsD,qBAAqBrF,GAR7B,SASSmF,EACF3B,MAAK,SAAC1C,GACJ,EAAKuE,qBAAqBrF,GAC1B,EAAKsF,uBAAuBpD,EAAI9B,GAChC+C,OAEFO,OAAM,SAAC9B,GACL,EAAKyD,qBAAqBrF,GAC1B,EAAKuF,oBAAoB3D,GACzBwB,OAlBT,gD,6FAsBA,SACuBlB,EAAYf,GAChC,IAAM4C,EAAOhC,KAAKe,MAAMkC,MAAK,SAACjB,GAAD,OAAUA,EAAK7B,KAAOA,KAC/C6B,GACDA,EAAKyB,sBAAsBrE,K,mCAIjC,SACsBG,GACnBS,KAAK0D,mBAAqBnE,I,wBAG7B,SACWY,GACRH,KAAKe,MAAQf,KAAKe,MAAM4C,QAAO,SAAC3B,GAAD,OAAUA,EAAK7B,KAAOA,O,kEAGxD,WAEGA,GAFH,qGAGGiB,EAHH,+BAGyB,aACtBC,EAJH,+BAIyB,aAEhBuC,EAAoB5D,KAAKc,aAAa+C,cAAc1D,GAC1DH,KAAK8D,uBAAuB3D,EAAIlC,GAPnC,SAQS2F,EACFnC,MAAK,WACH,EAAKqC,uBAAuB3D,EAAIlC,GAChC,EAAK8F,WAAW5D,GAChBiB,OAEFO,OAAM,SAAC9B,GACL,EAAKiE,uBAAuB3D,EAAIlC,GAChC,EAAK+F,sBAAsBnE,GAC3BwB,OAjBT,gD,gHApNCT,M,+GACAA,M,oGACAA,M,gHACAA,M,+GACAA,M,+GACAA,M,8GACAA,M,yGACAA,M,gHACAA,M,+GACAA,M,iHACAA,M,8vFC3BSqD,GAAW,WACXC,GAAgB,gBCiDdC,I,GAlCX9D,KAAOC,M,GAQPD,KAAOC,M,GAKPD,KAAOC,M,GAKPD,KAAOC,M,GAKPD,KAAOC,M,GAKPD,KAAOC,M,cAhCR,aAAe,2KACZN,KAAKoE,Y,6CAGR,WAEGpE,KAAKqE,SAAWJ,GAChBjE,KAAKgC,KAAO,IAAI5B,GAAU,CAAED,GAAI,GAAIK,KAAM,GAAIC,QAAS,GAAIC,IAAK,KAChEV,KAAKsE,eAAgB,EACrBtE,KAAKuE,OAAS,K,4BAGjB,SACeC,GACZxE,KAAKqE,SAAWG,I,+BAGnB,SACkBxC,GACfhC,KAAKgC,KAAOA,I,mCAGf,SACsB5C,GACnBY,KAAKsE,cAAgBlF,I,0BAGxB,SACae,GACVH,KAAKuE,OAASpE,I,wBAGjB,WAEGH,KAAKoE,gB,8CAvCPxD,M,mGACAA,M,4GACAA,M,qGACAA,M,8yBCIJ,IAKe6D,GAFA,CAAEC,UAHC,IAAI7D,GAHZ,IAAId,GAMc4E,QADZ,IAAIR,I,2BChBPS,GACC,UADDA,GAEK,uBAFLA,GAGG,UAHHA,GAKE,0BALFA,GAMA,UANAA,GAOS,uBAPTA,GAQO,UARPA,GASD,UATCA,GAUD,UAVCA,GAWC,UAXDA,GAeA,UAfAA,GAgBG,UAhBHA,GAiBE,UAjBFA,GAkBG,wBAlBHA,GAoBH,UApBGA,GAqBC,wBArBDA,GAsBD,UAtBCA,GAuBC,sBAvBDA,GAwBD,UAxBCA,GAyBH,U,SCzBGC,GAAQ,CAAEC,MAAO,QAASC,OAAQ,SAAUC,MAAO,SAEnDC,GAAW,CACrBC,QAAS,UACTC,QAAS,UACTC,KAAM,QAGIR,GAAS,CACnBM,QAAS,UACTG,QAAS,UACTC,UAAW,YACXC,QAAS,UACTC,QAAS,UACTC,OAAQ,UAGEC,GAAS,CACnBC,MAAO,QACPC,OAAQ,SACRC,KAAM,QCfGC,GAMRlB,GANDM,QACAG,GAKCT,GALDS,QACAC,GAICV,GAJDU,UACAC,GAGCX,GAHDW,QACAC,GAECZ,GAFDY,QACAC,GACCb,GADDa,OAGUM,GAAkB,SAACC,GAC7B,OAAQA,GACL,KAAKF,GACF,MAAO,CACJG,QAASC,GACTC,gBAAiBD,GACjBE,gBAAiBF,GACjBG,UAAWH,GACXI,gBAAiBJ,IAEvB,KAAKb,GACF,MAAO,CACJY,QAASC,GACTC,gBAAiBD,GACjBE,gBAAiBF,GACjBG,UAAWH,GACXI,gBAAiBJ,IAEvB,KAAKZ,GACF,MAAO,CACJW,QAASC,GACTC,gBAAiBD,GACjBE,gBAAiBF,GACjBG,UAAWH,GACXI,gBAAiBJ,IAEvB,KAAKX,GACF,MAAO,CACJU,QAASC,GACTC,gBAAiBD,GACjBE,gBAAiBF,GACjBG,UAAWH,GACXI,gBAAiBJ,IAEvB,KAAKV,GACF,MAAO,CACJS,QAASC,GACTC,gBAAiBD,GACjBE,gBAAiBF,GACjBG,UAAWH,GACXI,gBAAiBJ,IAEvB,KAAKT,GACF,MAAO,CACJQ,QAASC,GACTC,gBAAiBD,GACjBE,gBAAiBF,GACjBG,UAAWH,GACXI,gBAAiBJ,IAEvB,QACG,MAAO,CACJD,QAASC,GACTC,gBAAiBD,GACjBE,gBAAiBF,GACjBG,UAAWH,GACXI,gBAAiBJ,M,QChErBpB,GAAyBD,GAAzBC,MAAOC,GAAkBF,GAAlBE,OAAQC,GAAUH,GAAVG,MACfG,GAAwCF,GAAxCE,QAASC,GAA+BH,GAA/BG,KAAemB,GAAgBtB,GAAzBC,QACfS,GAAwBD,GAAxBC,MAAOC,GAAiBF,GAAjBE,OAAQC,GAASH,GAATG,KAEjBW,GAAgB,SAACC,GACpB,OAAQA,GACL,KAAK3B,GACF,MAAS,8EACZ,KAAKC,GACF,MAAS,8EACZ,KAAKC,GACF,MAAS,gFACZ,QACG,MAAS,gFAIZ0B,GAA2B,SAACC,EAASX,GAAW,IAAD,EAO9CD,GAAgBC,GALjBC,EAF+C,EAE/CA,QACAE,EAH+C,EAG/CA,gBACAC,EAJ+C,EAI/CA,gBACAC,EAL+C,EAK/CA,UACAC,EAN+C,EAM/CA,gBAEH,OAAQK,GACL,KAAKJ,GACF,OAAOK,aAAP,qHACuBX,EAGGA,EAGAE,EAEdG,GAEf,KAAKnB,GACF,OAAOyB,aAAP,oHAEuBX,EAKGG,EAEdC,GAEf,KAAKjB,GACF,OAAOwB,aAAP,2GAO0BR,EAEdC,GAEf,QACG,OAAOO,aAAP,qHACuBX,EAGGA,EAGAE,EAEdG,KAKfO,GAAiB,SAACC,GACrB,OAAQA,GACL,KAAKlB,GACF,MAAS,qBACZ,KAAKD,GACF,MAAS,wBACZ,KAAKE,GACF,MAAS,sBACZ,QACG,MAAS,uBAILkB,GAAeC,KAAOC,OAAV,iFAAGD,EACzB,gBAAGP,EAAH,EAAGA,KAAME,EAAT,EAASA,QAASX,EAAlB,EAAkBA,MAAOc,EAAzB,EAAyBA,MAAOI,EAAhC,EAAgCA,cAAeC,EAA/C,EAA+CA,SAA/C,MAA8D,CACzD,mMACFX,GAAcC,GACdC,GAAyBC,EAASX,GAClCa,GAAeC,GACfI,EAAkB,GAAO,0JACzBC,EAAa,qCAAoC,uBAI1CC,GAAgBJ,KAAOK,IAAV,kFAAGL,CAAH,QACnB,sCAKMM,GAAqBN,aAAOI,IAAV,uFAAGJ,CAAH,QACxB,qBAKMO,GAAmBP,aAAOI,IAAV,qFAAGJ,CAAH,QACtB,oBAKMQ,GAAOR,KAAOS,EAAV,yEAAGT,CAAH,M,QClGXU,G,8MAoBHC,sBAAwB,WAAkB,IAC/BC,EAAc,EAAKC,MAAnBD,UACR,OAAIA,EAEE,eAACN,GAAD,UACG,eAACE,GAAD,CAAMM,UAAU,iBAAhB,SAAkCF,MAIpC,M,EAGVG,oBAAsB,WAAkB,IAC7BC,EAAY,EAAKH,MAAjBG,QACR,OAAIA,EAEE,eAACT,GAAD,UACG,eAACC,GAAD,CAAMM,UAAU,iBAAhB,SAAkCE,MAIpC,M,EAGVC,kBAAoB,WAAkB,IAAD,EACG,EAAKJ,MAAlCK,EAD0B,EAC1BA,QAASC,EADiB,EACjBA,SAAUnC,EADO,EACPA,MACnBM,EAAoBP,GAAgBC,GAApCM,gBACR,OAAI4B,EAEE,eAAC,cAAD,CAAYzB,KAAM,GAAIT,MAAOM,EAAiB4B,QAASA,IAGtD,qCAAGC,K,4CAGb,WAAwB,IAAD,EAYhBnI,KAAK6H,MAVNpB,EAFiB,EAEjBA,KACAE,EAHiB,EAGjBA,QACAX,EAJiB,EAIjBA,MACAc,EALiB,EAKjBA,MACAI,EANiB,EAMjBA,cACAC,EAPiB,EAOjBA,SAEAW,GATiB,EAQjBI,QARiB,EASjBJ,WACAM,EAViB,EAUjBA,QACGC,EAXc,8GAapB,OACG,gBAACtB,GAAD,yBACGe,UAAWA,EACXrB,KAAMA,EACNE,QAASA,EACTX,MAAOA,EACPc,MAAOA,EACPI,cAAeA,EACfC,SAAUA,EACViB,QAASA,GACLC,GATP,cAWIrI,KAAK2H,wBACL3H,KAAKiI,oBACLjI,KAAK+H,8B,GAlFGO,aAAfZ,GACIa,aAAe,CACnBH,QAAS,aACTjB,UAAU,EACVe,SAAS,EACTzB,KAAM5B,GAAME,OACZ4B,QAAS1B,GAASC,QAClBc,MAAOpB,GAAOM,QACd4B,MAAOpB,GAAOE,OACdgC,UAAW,GACXI,QAAS,GACTd,eAAe,EACfY,UAAW,IAZXJ,GAeI7C,MAAQA,GAfZ6C,GAgBI9C,OAASA,GAhBb8C,GAiBIhC,OAASA,GAjBbgC,GAkBIzC,SAAWA,GAsENyC,IChHAA,GDgHAA,GEhHFc,GAAkBxB,KAAOK,IAAV,oFAAGL,CAAH,sBACrB,6QAMMyB,GAAQzB,KAAO0B,GAAV,0EAAG1B,CAAH,QACX,8BAKM2B,GAAc3B,KAAO4B,EAAV,gFAAG5B,CAAH,QACjB,8CCHQ6B,ICXAA,GDEf,WACG,OACG,gBAACL,GAAD,WACG,eAACC,GAAD,oBACA,eAACE,GAAD,6C,2BERIG,GAAW,sNCAXjE,GAAQ,CAAEC,MAAO,QAASC,OAAQ,SAAUC,MAAO,SAEnDJ,GAAS,CACnBM,QAAS,UACTG,QAAS,UACTC,UAAW,YACXC,QAAS,UACTC,QAAS,UACTC,OAAQ,UAGEC,GAAS,CACnBqD,UAAW,YACXnD,OAAQ,UCTLiB,GAAiB,SAACC,GACrB,OAAQA,GACL,KAAKpB,GAAOqD,UACT,MAAS,qBACZ,KAAKrD,GAAOE,OAEZ,QACG,MAAS,uBAIZY,GAAgB,SAACC,EAAcmB,EAAmBI,GACrD,OAAQvB,GACL,KAAK5B,GAAMC,MACR,OAAO8C,EACA,mCACFI,EACE,oCACA,gBACV,KAAKnD,GAAME,OACR,OAAO6C,EACA,oCACFI,EACE,qCACA,iBACV,KAAKnD,GAAMG,MACR,OAAO4C,EACA,oCACFI,EACE,qCACA,iBACV,QACG,OAAOJ,EACA,oCACFI,EACE,qCACA,mBAIVgB,GAAsB,SAAChD,GAC1B,OAAQA,GACL,KAAKpB,GAAOM,QAEZ,KAAKN,GAAOS,QACT,MAAS,iGACZ,KAAKT,GAAOU,UACT,MAAS,mGACZ,KAAKV,GAAOY,QACT,MAAS,kGACZ,KAAKZ,GAAOW,QACT,MAAS,iGACZ,KAAKX,GAAOa,OACT,MAAS,iGACZ,QACG,MAAS,mGAIZwD,GAAqB,SAACjD,EAAezG,GACxC,GAAIA,EACD,MAAS,4EAEZ,OAAQyG,GACL,KAAKpB,GAAOM,QAEZ,KAAKN,GAAOS,QACT,MAAS,4EACZ,KAAKT,GAAOU,UACT,MAAS,8EACZ,KAAKV,GAAOY,QACT,MAAS,6EACZ,KAAKZ,GAAOW,QACT,MAAS,4EACZ,KAAKX,GAAOa,OACT,MAAS,4EACZ,QACG,MAAS,8EAILyD,GAAyBlC,KAAOK,IAAV,8FAAGL,CAAH,QAC5B,sDAKMmC,GAAanC,KAAOoC,KAAV,kFAAGpC,EAAY,gBAAGzH,EAAH,EAAGA,MAAOyG,EAAV,EAAUA,MAAV,MAAkC,CAAlC,EAAiBqD,YACtCJ,GAAmBjD,EAAOzG,GACxCA,GAAW,gFAGD+J,GAAiBtC,KAAOK,IAAV,sFAAGL,CAAH,QACpB,0DAIDI,GAAgBJ,KAAOK,IAAV,qFAAGL,CAAH,QACZ,uCAKMM,GAAqBN,aAAOI,IAAV,0FAAGJ,CAAH,eAIlBO,GAAmBP,aAAOI,IAAV,wFAAGJ,CAAH,gBAIhBQ,GAAOR,KAAOS,EAAV,4EAAGT,CAAH,MAEJuC,GAAYvC,KAAOwC,MAAV,iFAAGxC,EACtB,gBAAGzH,EAAH,EAAGA,MAAOkH,EAAV,EAAUA,KAAMK,EAAhB,EAAgBA,MAAOd,EAAvB,EAAuBA,MAAOmB,EAA9B,EAA8BA,SAAUsC,EAAxC,EAAwCA,UAAW7B,EAAnD,EAAmDA,UAAWI,EAA9D,EAA8DA,QAA9D,MAA4E,CACvE,+LACFnB,GAAeC,GACfN,GAAcC,EAAMmB,EAAWI,GAC/BgB,GAAoBhD,GACpBzG,GAAW,qLACX4H,EACO,gIACA,gBACPsC,EAAc,eAAa,0BAIpBC,GAAW1C,KAAO2C,SAAV,gFAAG3C,EACrB,gBAAGzH,EAAH,EAAGA,MAAOkH,EAAV,EAAUA,KAAMK,EAAhB,EAAgBA,MAAOd,EAAvB,EAAuBA,MAAOmB,EAA9B,EAA8BA,SAAUsC,EAAxC,EAAwCA,UAAW7B,EAAnD,EAAmDA,UAAWI,EAA9D,EAA8DA,QAA9D,MAA4E,CACvE,6MACFnB,GAAeC,GACfN,GAAcC,EAAMmB,EAAWI,GAC/BgB,GAAoBhD,GACpBzG,GAAW,qLACX4H,EACO,gIACA,gBACPsC,EAAc,GAAO,0BAIdG,GAAY5C,KAAOoC,KAAV,iFAAGpC,EAAY,gBAAGzH,EAAH,EAAGA,MAAOyG,EAAV,EAAUA,MAAV,MAAkC,CAClE,kBADgC,EAAiBqD,YAErCJ,GAAmBjD,EAAOzG,GACxCA,GAAW,gFCjHRsK,G,8MACHC,MAAQ,CACLT,YAAY,G,EA2BfU,gBAAkB,WAAkB,IAAD,EACC,EAAKlC,MAA9BD,EADwB,EACxBA,UAAWoC,EADa,EACbA,UACnB,OAAOpC,IAAcoC,EAClB,eAAC,GAAD,UACG,eAAC,GAAD,CAAMlC,UAAU,iBAAhB,SAAkCF,MAEpC,M,EAGPqC,cAAgB,WAAkB,IAAD,EACC,EAAKpC,MAA5BG,EADsB,EACtBA,QAASgC,EADa,EACbA,UACjB,OAAOhC,IAAYgC,EAChB,eAAC,GAAD,UACG,eAAC,GAAD,CAAMlC,UAAU,iBAAhB,SAAkCE,MAEpC,M,EAGPkC,QAAU,WACP,EAAKC,SAAS,CAAEd,YAAY,K,EAG/Be,OAAS,WACN,EAAKD,SAAS,CAAEd,YAAY,K,EAG/BgB,sBAAwB,WAAkB,IAAD,EAoBlC,EAAKxC,MAlBNtJ,EAFmC,EAEnCA,KACAiL,EAHmC,EAGnCA,MACAc,EAJmC,EAInCA,YACAC,EALmC,EAKnCA,cAGA9D,GARmC,EAMnC+D,MANmC,EAOnCC,KAPmC,EAQnChE,MACAK,EATmC,EASnCA,MACA2C,EAVmC,EAUnCA,UACAzD,EAXmC,EAWnCA,MACAmB,EAZmC,EAYnCA,SACA5H,EAbmC,EAanCA,MACAyK,EAdmC,EAcnCA,UACAU,EAfmC,EAenCA,KACA9C,EAhBmC,EAgBnCA,UACAI,EAjBmC,EAiBnCA,QACAF,EAlBmC,EAkBnCA,UACGO,EAnBgC,yLAqBtC,OAAO2B,EACJ,eAACN,GAAD,aACGnL,KAAMA,EACNoM,MAAOnB,EACPc,YAAaA,EACbM,SAAUL,EACV9D,KAAMA,EACNK,MAAOA,EACPd,MAAOA,EACPzG,MAAOA,EACP4H,SAAUA,EACVsC,UAAWA,EACXS,QAAS,EAAKA,QACdE,OAAQ,EAAKA,OACbM,KAAMA,EACN5C,UAAWA,EACXF,UAAWA,EACXI,QAASA,GACLK,IAGP,eAACkB,GAAD,aACGhL,KAAMA,EACNoM,MAAOnB,EACPc,YAAaA,EACbM,SAAUL,EACV9D,KAAMA,EACNK,MAAOA,EACPd,MAAOA,EACPzG,MAAOA,EACP4H,SAAUA,EACVsC,UAAWA,EACXS,QAAS,EAAKA,QACdE,OAAQ,EAAKA,OACbtC,UAAWA,EACXF,UAAWA,EACXI,QAASA,GACLK,K,4CAKb,WAAU,IAAD,EACgCrI,KAAK6H,MAAnC2C,EADF,EACEA,MAAOC,EADT,EACSA,KAAMzE,EADf,EACeA,MAAOzG,EADtB,EACsBA,MACpB8J,EAAerJ,KAAK8J,MAApBT,WACR,OACG,gBAACH,GAAD,WACG,eAACC,GAAD,CAAY5J,MAAOA,EAAOyG,MAAOA,EAAOqD,WAAYA,EAApD,SACImB,IAEJ,gBAAClB,GAAD,WACItJ,KAAK+J,kBACL/J,KAAKqK,wBACLrK,KAAKiK,mBAET,eAACL,GAAD,CAAWrK,MAAOA,EAAOyG,MAAOA,EAAOqD,WAAYA,EAAnD,SACIoB,W,GApIInC,aAAduB,GAKItB,aAAe,CACnBiC,MAAO,GACPjL,OAAO,EACP4H,UAAU,EACVV,KAAM5B,GAAME,OACZiB,MAAOpB,GAAOS,QACdyB,MAAOpB,GAAOE,OACd6D,WAAW,EACXO,WAAW,EACXU,KAAM,EACN9C,UAAW,GACXI,QAAS,GACTsC,YAAa,aACbC,cAAe,aACff,MAAO,GACPiB,KAAM,GACNlM,KAAM,OACNuJ,UAAW,IAtBX+B,GAyBIhF,MAAQA,GAzBZgF,GA0BIjF,OAASA,GA1BbiF,GA2BInE,OAASA,GAgHJmE,I,2BC5KAA,GD4KAA,GEzKFgB,GAAgB7D,KAAOK,IAAV,kFAAGL,CAAH,QACnB,wFAKM8D,GAAO9D,KAAO+D,KAAV,yEAAG/D,CAAH,QACV,gBAKMgE,GAAqBhE,KAAOK,IAAV,uFAAGL,CAAH,QACxB,0DAKMiE,GAAYjE,aAAO6C,IAAV,8EAAG7C,CAAH,MAETkE,GAAUlE,KAAO4B,EAAV,4EAAG5B,CAAH,QACb,4KAKMmE,GAAmBnE,KAAOK,IAAV,qFAAGL,CAAH,QACtB,kBAKMoE,GAAmBpE,aAAOU,IAAV,qFAAGV,CAAH,iCACtB,yDAKG,uFAMGqE,GAAyBrE,aAAOoE,IAAV,2FAAGpE,CAAH,qBAC5B,eAIG,uFCpDKsE,GCoDdC,YAAO,U,IACPC,a,uDAME,WAAY3D,GAAQ,IAAD,6BAChB,cAAMA,GADU,kIASnB4D,aAAe,WACZ,EAAKjL,KAAO,GACZ,EAAKC,QAAU,GACf,EAAKC,IAAM,IAZK,EAwBnBgL,0BAA4BC,cACzB,WAEG,OADiB,EAAKhH,QAAd3C,QAGX,SAACA,GAAqB,IACXqC,EAAa,EAAKM,QAAlBN,SACA7D,EAAuBwB,EAAvBxB,KAAMC,EAAiBuB,EAAjBvB,QAASC,EAAQsB,EAARtB,IACnB2D,IAAaH,KACd,EAAK1D,KAAOA,EACZ,EAAKC,QAAUA,EACf,EAAKC,IAAMA,MAnCD,EAwCnBkL,aAAe,SAACC,GACb,EAAKrL,KAAOqL,EAAMC,OAAOnB,OAzCT,EA4CnBoB,gBAAkB,SAACF,GAChB,EAAKpL,QAAUoL,EAAMC,OAAOnB,OA7CZ,EAgDnBqB,YAAc,SAACH,GACZ,EAAKnL,IAAMmL,EAAMC,OAAOnB,OAjDR,EAoDnBsB,qBAAuB,WACpBC,KAAU3G,QAAQ,2BAA4B,CAC3C4G,SAAU,kBAEb,EAAKV,gBAxDW,EA2DnBW,qBAAuB,WAAO,IACnBlL,EAAqB,EAAK2G,MAA1B3G,iBACRgL,KAAU3M,MAAMD,EAAsB4B,GAAmB,CACtDiL,SAAU,mBA9DG,EAkEnB5K,YAAc,WAAO,IACVA,EAAgB,EAAKsG,MAArBtG,YACJ,EAAKf,MAAQ,EAAKC,SAAW,EAAKC,IAC/B,EAAKA,IAAI2L,MAAMvD,IAChBvH,EACG,CAAEf,KAAM,EAAKA,KAAMC,QAAS,EAAKA,QAASC,IAAK,EAAKA,KACpD,EAAKuL,qBACL,EAAKG,sBAGRF,KAAU3M,MAAM,qBAAsB,CACnC4M,SAAU,kBAIhBD,KAAU3M,MAAM,uBAAwB,CACrC4M,SAAU,mBAlFA,EAuFnBG,kBAAoB,WACjBJ,KAAU3G,QAAQ,4BAA6B,CAC5C4G,SAAU,kBAEb,EAAKI,uBA3FW,EA8FnBC,kBAAoB,WAAO,IAChBzJ,EAAqB,EAAK8E,MAA1B9E,iBACRmJ,KAAU3M,MAAMD,EAAsByD,GAAmB,CACtDoJ,SAAU,mBAjGG,EAqGnB9I,YAAc,WAAO,IACVA,EAAgB,EAAKwE,MAArBxE,YACArB,EAAS,EAAK2C,QAAd3C,KACJA,EAAKvB,UAAY,EAAKA,SAAWuB,EAAKtB,MAAQ,EAAKA,IAChD,EAAKD,SAAW,EAAKC,IACtB2C,EACGrB,EAAK7B,GACL,CAAEM,QAAS,EAAKA,QAASC,IAAK,EAAKA,KACnC,EAAK4L,kBACL,EAAKE,mBAGRN,KAAU3M,MAAM,uBAAwB,CACrC4M,SAAU,kBAIhBD,KAAU3M,MAAM,wCAAyC,CACtD4M,SAAU,mBAvHA,EA4HnBM,aAAe,SAACZ,GACbA,EAAMa,iBACe,EAAK/H,QAAlBN,WACSH,GACd,EAAKb,cAEL,EAAK9B,eAlIQ,EAsInBgL,oBAAsB,WAAO,IAClBI,EAAe,EAAKhI,QAApBgI,WACR,EAAKlB,eACLkB,KAvIA,EAAKlB,eAFW,E,wDAKnB,WACGzL,KAAK0L,8B,yBASR,WACG,OAAO1L,KAAK6H,Q,mBAGf,WAEG,OADoB7H,KAAK4M,cAAjBjI,U,oBAwHX,WAAwB,IAAD,EAC6B3E,KAAK6H,MAA9C5G,EADY,EACZA,kBAAmB6B,EADP,EACOA,kBACnBuB,EAAarE,KAAK2E,QAAlBN,SACFwI,EACH1N,EAAW8B,IAAsB9B,EAAW2D,GAC/C,OACG,eAAC+H,GAAD,UACG,gBAACC,GAAD,CAAMgC,SAAU9M,KAAKyM,aAArB,UACG,eAACzB,GAAD,UACG,eAACC,GAAD,CACGT,MAAM,aACNF,YAAY,uBACZd,MAAOxJ,KAAKQ,KACZoK,SAAU5K,KAAK4L,aACfnC,WAAS,EACTtC,SAAU9C,IAAaH,OAG7B,eAAC8G,GAAD,UACG,eAACC,GAAD,CACGT,MAAM,UACNF,YAAY,+BACZd,MAAOxJ,KAAKS,QACZmK,SAAU5K,KAAK+L,gBACftC,WAAS,MAGf,eAACuB,GAAD,UACG,eAACC,GAAD,CACGT,MAAM,WACNF,YAAY,8BACZd,MAAOxJ,KAAKU,IACZkK,SAAU5K,KAAKgM,YACfvC,WAAS,MAGf,gBAACyB,GAAD,WACG,eAAC,KAAD,CAAezE,KAAM,KADxB,8BAGA,gBAAC0E,GAAD,WACG,eAACC,GAAD,CACG3E,KAAMiB,GAAO7C,MAAMG,MACnBgB,MAAO0B,GAAO9C,OAAOS,QACrB9G,KAAK,SACL2J,QAAS2E,EACT1F,SAAU0F,EALb,SAOIxI,IAAaJ,GAAW,cAAgB,gBAE3CI,IAAaH,GACX,eAACmH,GAAD,CACG5E,KAAMiB,GAAO7C,MAAMG,MACnBgB,MAAO0B,GAAO9C,OAAOa,OACrBlH,KAAK,SACL6J,QAASpI,KAAKuM,oBAJjB,+BAQC,iB,GA3MCjE,a,qCACnB1H,M,sGACAA,M,kGACAA,M,iGC3DW,OAA0B,gCCG5BmM,GAAgB/F,KAAOK,IAAV,qFAAGL,CAAH,sDACnB,8GAMMgG,GAAUhG,KAAOK,IAAV,+EAAGL,CAAH,QACb,sFAKMiG,GAAejG,aAAOgG,IAAV,oFAAGhG,CAAH,QAClB,oBAKMkG,GAAgBlG,KAAOoC,KAAV,qFAAGpC,CAAH,QACnB,oBAOMmG,IAFiBnG,KAAOoC,KAAV,sFAAGpC,CAAH,MAEIA,aAAOgG,IAAV,uFAAGhG,CAAH,QACrB,uCAKMoG,GAAcpG,KAAOoC,KAAV,mFAAGpC,CAAH,QACjB,oBAKMqG,GAAuBrG,KAAOK,IAAV,4FAAGL,CAAH,QAC1B,kBAKMsG,GAAatG,aAAOU,IAAV,kFAAGV,CAAH,qBAChB,gLAIG,iCAMGuG,GAAevG,aAAOsG,IAAV,oFAAGtG,CAAH,QAClB,oBAKMwG,GAAqBxG,KAAOK,IAAV,2FAAGL,CAAH,QACxB,kBAKMyG,GAAYzG,KAAO0G,IAAV,kFAAG1G,CAAH,QACf,6FCmEQ2G,GAhGdpC,YAAO,U,IACPC,Y,iNAWEoC,SAAW,SAAC/B,GACTA,EAAMgC,kBADa,IAEX7L,EAAS,EAAK6F,MAAd7F,KAFW,EAG2B,EAAK2C,QAA3CmJ,EAHW,EAGXA,eAAgBC,EAHL,EAGKA,kBACxBD,EAAe5J,IACf6J,EAAkB/L,I,EAGrBgM,oBAAsB,WACnB9B,KAAU3G,QAAQ,6BAA8B,CAC7C4G,SAAU,mB,EAIhB8B,oBAAsB,WAAO,IAClBvK,EAAuB,EAAKmE,MAA5BnE,mBACRwI,KAAU3M,MAAMD,EAAsBoE,GAAqB,CACxDyI,SAAU,mB,EAIhBtI,cAAgB,SAACgI,GACdA,EAAMgC,kBADkB,MAKpB,EAAKhG,OACThE,EANwB,EAGrBA,eAHqB,EAIrB7B,KAAQ7B,GAEO,EAAK6N,oBAAqB,EAAKC,sB,EAGpDC,cAAgB,WAAa,IAAD,EACuB,EAAKvJ,QAA7CwJ,EADiB,EACjBA,uBAIRC,EALyB,EACMA,cAG3B,EAAKvG,MADN7F,KAAQ7B,IAGXgO,GAAsB,I,iDA7CzB,WACG,OAAOnO,KAAK6H,Q,mBAGf,WAEG,OADoB7H,KAAK4M,cAAjBjI,U,oBA2CX,WAAU,IAAD,EAGF3E,KAAK6H,MADN7F,KAAQ7B,EAFL,EAEKA,GAAIK,EAFT,EAESA,KAAMC,EAFf,EAEeA,QAASC,EAFxB,EAEwBA,IAAKC,EAF7B,EAE6BA,gBAF7B,EAOFX,KAAK2E,QAFNN,EALG,EAKHA,SACYgK,EANT,EAMHrM,KAAQ7B,GAELmO,EAAanP,EAAWwB,GACxB4N,EACHD,GAAejK,IAAaH,IAAiB/D,IAAOkO,EACvD,OACG,gBAACtB,GAAD,CAAe3E,QAASpI,KAAKkO,cAA7B,UACG,eAACjB,GAAD,UACG,eAACC,GAAD,UAAgB1M,MAEnB,gBAAC2M,GAAD,WACG,eAACC,GAAD,UAAc3M,IACd,gBAAC4M,GAAD,WACG,eAACC,GAAD,CAAYlF,QAASpI,KAAK4N,SAA1B,SACG,eAAC,KAAD,CAAWnH,KAAM,OAEpB,eAAC8G,GAAD,CACGnF,QAASpI,KAAK6D,cACdqE,QAASoG,EACTnH,SAAUoH,EAHb,SAKG,eAAC,KAAD,CAAc9H,KAAM,aAI7B,eAAC+G,GAAD,UACG,eAACC,GAAD,CACGe,IAAK/N,EACLgO,IAAK/N,EACLgO,QAAS,SAAC7C,GACPA,EAAMC,OAAO2C,IAAME,e,GArFrBrG,e,QC3CNsG,GAAiB5H,KAAOK,IAAV,mFAAGL,CAAH,2FACpB,mIAOC,qBAAG6H,WACQ,mEAMNC,GAAiB9H,KAAOoC,KAAV,mFAAGpC,CAAH,QACpB,2DChBQ+H,GCgBdvD,Y,iKAEE,WAAU,IAAD,EAC+CxL,KAAK6H,MAAlD9G,EADF,EACEA,MAAO8C,EADT,EACSA,cAAeH,EADxB,EACwBA,mBACxBsL,EAAajO,EAAMkO,OACnBC,EAAiBnO,EAAMoO,MAAM,EAAGC,KAAKC,KAAKL,EAAa,IACvDM,EAAkBvO,EAAMoO,MAC3BC,KAAKC,KAAKL,EAAa,GACvBA,GAEGH,EAA8B,IAAjB9N,EAAMkO,OACzB,OACG,eAACL,GAAD,CAAgBC,WAAYA,EAA5B,SACIA,EACE,eAACC,GAAD,oCAEA,uCACG,+BACII,EAAeK,KAAI,SAACvN,GAAD,OACjB,eAAC,GAAD,CAEGA,KAAMA,EACN6B,cAAeA,EACfH,mBAAoBA,GAHf1B,EAAK7B,SAOnB,+BACImP,EAAgBC,KAAI,SAACvN,GAAD,OAClB,eAAC,GAAD,CAEGA,KAAMA,EACN6B,cAAeA,EACfH,mBAAoBA,GAHf1B,EAAK7B,kB,GA7BjBmI,e,GCfPkH,GAAexI,KAAOK,IAAV,iFAAGL,CAAH,MAEZyI,GAAwBzI,KAAOK,IAAV,0FAAGL,CAAH,oCAC3B,uKAMM4H,GAAiB5H,KAAOK,IAAV,mFAAGL,CAAH,oCACpB,4IAMM0I,GAAuB1I,KAAO4B,EAAV,yFAAG5B,CAAH,QAC1B,sBAKM2I,GAAyB3I,aAAOU,IAAV,2FAAGV,CAAH,MCxBpB4I,GC8BdrE,YAAO,Y,IACPC,Y,iNAeEqE,SAAW,WACR,EAAKnL,UAAUvC,e,EAGlB2N,YAAc,WAAkB,IAAD,EAOxB,EAAKpL,UALN7C,EAFyB,EAEzBA,kBACAC,EAHyB,EAGzBA,iBACAf,EAJyB,EAIzBA,MACA8C,EALyB,EAKzBA,cACAH,EANyB,EAMzBA,mBAEH,OAAIvE,EAAW0C,GAET,eAAC,GAAD,UACG,eAAC,cAAD,CAAY4E,KAAM,GAAIT,MAAOpB,OAIlCvF,EAASwC,GAEP,gBAAC,GAAD,WACG,eAAC6N,GAAD,UACIpQ,EAAsBwC,KAE1B,eAAC6N,GAAD,CACG3J,MAAO0B,GAAO9C,OAAOS,QACrB+C,QAAS,EAAKyH,SAFjB,sBAUN,eAAC,GAAD,CACG9O,MAAOA,EACP8C,cAAeA,EACfH,mBAAoBA,K,uDAnD7B,WACG1D,KAAK6P,a,yBAGR,WACG,OAAO7P,KAAK6H,Q,qBAGf,WAEG,OADsB7H,KAAK4M,cAAnBlI,Y,oBA+CX,WACG,OACG,gBAAC8K,GAAD,WACG,eAAC,GAAD,IACA,gBAACC,GAAD,WACG,eAAC,GAAD,CACGlO,YAAavB,KAAK0E,UAAUnD,YAC5BN,kBAAmBjB,KAAK0E,UAAUzD,kBAClCC,iBAAkBlB,KAAK0E,UAAUxD,iBACjCmC,YAAarD,KAAK0E,UAAUrB,YAC5BP,kBAAmB9C,KAAK0E,UAAU5B,kBAClCC,iBAAkB/C,KAAK0E,UAAU3B,mBAEnC/C,KAAK8P,wB,GAtEGxH,e,4BC9BXyE,I,OAAgB/F,KAAOK,IAAV,sFAAGL,CAAH,0CACnB,8IAOM+I,GAAkB/I,KAAOK,IAAV,wFAAGL,CAAH,QACrB,+EAKMgG,GAAUhG,KAAOK,IAAV,gFAAGL,CAAH,QACb,mFAKMgJ,GAAqBhJ,KAAOK,IAAV,2FAAGL,CAAH,QACxB,kGAKMiJ,GAAsBjJ,KAAO4B,EAAV,4FAAG5B,CAAH,QACzB,sBAKMkJ,GAAwBlJ,aAAOU,IAAV,8FAAGV,CAAH,MAErBmJ,GAAcnJ,aAAOU,IAAV,oFAAGV,CAAH,qBACjB,6LAIG,iCAMGkG,GAAgBlG,KAAO4B,EAAV,sFAAG5B,CAAH,QACnB,oFAKMoG,GAAcpG,KAAO4B,EAAV,oFAAG5B,CAAH,QACjB,oGAKMwG,GAAqBxG,KAAOK,IAAV,2FAAGL,CAAH,QACxB,kCAKMyG,GAAYzG,KAAO0G,IAAV,mFAAG1G,CAAH,QACf,kCClEQoJ,GCuCd7E,YAAO,UAAW,Y,IAClBC,Y,iNAoBE6E,kBAAoB,WAAa,IAAD,EAIzB,EAAKzD,eACTlK,EAL6B,EAE1BgC,UAAahC,YAFa,EAG1BiC,QAAWJ,S,EAKjB+L,eAAiB3E,cACd,WAEG,OAD0B,EAAKhH,QAAvBL,iBAGX,SAACA,GACMA,GACD,EAAK+L,uB,EAKdE,eAAiB,WAAa,IACnBpC,EAA0B,EAAKxJ,QAA/BwJ,uBAERqC,EAD4B,EAAK9L,UAAzB8L,mBAERrC,GAAsB,I,EAGzBsC,WAAajF,aACV,WAAqB,IAAD,EAKb,EAAK9G,UAHNnC,EAFc,EAEdA,iBACAC,EAHc,EAGdA,gBACAxB,EAJc,EAIdA,WAGH,GADA0P,QAAQC,IAAIpO,GACRpD,EAAWoD,GACZ,OACG,eAAC,GAAD,UACG,eAACwN,GAAD,UACG,eAAC,cAAD,CAAYtJ,KAAM,GAAIT,MAAOpB,SAKzC,GAAIvF,EAASkD,GACV,OACG,gBAAC,GAAD,WACG,eAAC,GAAD,UACG,eAAC4N,GAAD,CAAa/H,QAAS,EAAKmI,eAA3B,SACI,eAAC,KAAD,CAAsB9J,KAAM,SAGnC,gBAACuJ,GAAD,WACG,eAACC,GAAD,UACI3Q,EAAsBkD,KAE1B,eAAC0N,GAAD,CACGlK,MAAO0B,GAAO9C,OAAOS,QACrB+C,QAAS,EAAKiI,kBAFjB,yBAUZ,GAAIrP,EAAY,CAAC,IACNR,EAAuBQ,EAAvBR,KAAMC,EAAiBO,EAAjBP,QAASC,EAAQM,EAARN,IACvB,OACG,gBAAC,GAAD,WACG,eAAC,GAAD,UACG,eAACyP,GAAD,CAAa/H,QAAS,EAAKmI,eAA3B,SACI,eAAC,KAAD,CAAsB9J,KAAM,SAGnC,eAAC,GAAD,UAAgBjG,IAChB,eAAC,GAAD,UAAcC,IACd,eAAC,GAAD,UACG,eAAC,GAAD,CACG+N,IAAK/N,EACLgO,IAAK/N,EACLgO,QAAS,SAAC7C,GAAD,OAAYA,EAAMC,OAAO2C,IAAME,WAMvD,OAAO,kC,0DAzGb,WACG3O,KAAKsQ,mB,yBAGR,WACG,OAAOtQ,KAAK6H,Q,qBAGf,WAEG,OADsB7H,KAAK4M,cAAnBlI,Y,mBAIX,WAEG,OADoB1E,KAAK4M,cAAjBjI,U,oBA+FX,WAAU,IACCL,EAAkBtE,KAAK2E,QAAvBL,cACYsM,EAAe5Q,KAA3ByQ,WACR,OACG,eAAC,KAAD,CACGI,OAAQvM,EACRwM,eAAgB9Q,KAAKuQ,eACrBzI,UAAU,aACViJ,iBAAiB,eACjBC,eAAgB,IAChBC,aAAa,EANhB,SAQG,eAACL,EAAD,U,GA1HYtI,e,QC3BT4I,OATf,WACG,OACG,gBAAC,IAAD,2BAAczM,IAAd,cACG,eAAC,GAAD,IACA,eAAC,GAAD,SCKM0M,GAdS,SAACC,GAClBA,GAAeA,aAAuBC,UACvC,8BAAqB5P,MAClB,YAAkD,IAA/C6P,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAChCJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCJpBO,IAASC,OACN,eAAC,IAAMC,WAAP,UACG,eAAC,GAAD,MAEHC,SAASC,eAAe,SAM3BZ,M","file":"static/js/main.c0cc3505.chunk.js","sourcesContent":["export const apiMethods = {\r\n   post: \"POST\",\r\n   get: \"GET\",\r\n   patch: \"PATCH\",\r\n   delete: \"DELETE\",\r\n};\r\n\r\nexport const apiStatus = {\r\n   loading: 100,\r\n   success: 200,\r\n   failed: 400,\r\n};\r\n","import { apiMethods, apiStatus } from \"../constants/APIConstants\";\r\n\r\nexport const networkCallWithAxios = async (\r\n   api,\r\n   endpoint: string,\r\n   requestData,\r\n   type = apiMethods.post\r\n) => {\r\n   try {\r\n      let response;\r\n      api.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\r\n      switch (type) {\r\n         case apiMethods.post:\r\n            response = await api.post(endpoint, { ...requestData });\r\n            if (response.ok === false) {\r\n               throw Error(JSON.stringify(response.data));\r\n            }\r\n            return response.data;\r\n         case apiMethods.get:\r\n            response = await api.get(endpoint);\r\n            if (response.ok === false) {\r\n               throw Error(JSON.stringify(response.data));\r\n            }\r\n            return response.data;\r\n         case apiMethods.patch:\r\n            response = await api.patch(endpoint, { ...requestData });\r\n            if (response.ok === false) {\r\n               throw Error(JSON.stringify(response.data));\r\n            }\r\n            return response.data;\r\n         case apiMethods.delete:\r\n            response = await api.delete(endpoint);\r\n            if (response.ok === false) {\r\n               throw Error(JSON.stringify(response.data));\r\n            }\r\n            return response.data;\r\n         default:\r\n      }\r\n   } catch (err) {\r\n      throw err;\r\n   }\r\n};\r\n\r\nexport const isFetching = (status: number) => apiStatus.loading === status;\r\n\r\nexport const isFailed = (status: number) => apiStatus.failed === status;\r\n\r\nexport const isSuccess = (status: number) => apiStatus.success === status;\r\n\r\nexport const getParsedErrorMessage = (error) => {\r\n   const errorDescription = \"Something went wrong. Please try again!\";\r\n\r\n   let description: string = errorDescription;\r\n   try {\r\n      if (error !== null && error !== undefined) {\r\n         let parsedError = JSON.parse(error.message);\r\n         if (parsedError !== undefined && parsedError !== null) {\r\n            if (parsedError.error) {\r\n               description = parsedError.error;\r\n            }\r\n         }\r\n      }\r\n   } catch (err) {}\r\n\r\n   return description;\r\n};\r\n","export const endpoints = { memes: \"memes/\" };\r\n","import { create } from \"apisauce\";\r\n\r\nimport { apiMethods } from \"../../../Common/constants/APIConstants\";\r\nimport { networkCallWithAxios } from \"../../../Common/utils/APIUtils\";\r\n\r\nimport {\r\n   EditMemeRequestType,\r\n   GetMemeResponseType,\r\n   PostMemeRequestType,\r\n   PostMemeResponseType,\r\n} from \"../../types/DataTypes\";\r\n\r\nimport { endpoints } from \"../endpoints\";\r\n\r\nimport { MemesService } from \".\";\r\n\r\nclass MemesAPIs implements MemesService {\r\n   api: Record<string, any>;\r\n\r\n   constructor() {\r\n      this.api = create({\r\n         baseURL:\r\n            \"http://ec2-3-7-120-206.ap-south-1.compute.amazonaws.com:8081/api/\",\r\n      });\r\n   }\r\n\r\n   postMemeAPI(\r\n      requestData: PostMemeRequestType\r\n   ): Promise<PostMemeResponseType> {\r\n      return networkCallWithAxios(\r\n         this.api,\r\n         endpoints.memes,\r\n         requestData,\r\n         apiMethods.post\r\n      );\r\n   }\r\n\r\n   getMemesAPI(): Promise<Array<GetMemeResponseType>> {\r\n      return networkCallWithAxios(\r\n         this.api,\r\n         endpoints.memes,\r\n         {},\r\n         apiMethods.get\r\n      );\r\n   }\r\n\r\n   getMemeAPI(id: string): Promise<GetMemeResponseType> {\r\n      return networkCallWithAxios(\r\n         this.api,\r\n         `${endpoints.memes}${id}/`,\r\n         {},\r\n         apiMethods.get\r\n      );\r\n   }\r\n\r\n   editMemeAPI(\r\n      id: string,\r\n      requestData: EditMemeRequestType\r\n   ): Promise<{ id: string }> {\r\n      return networkCallWithAxios(\r\n         this.api,\r\n         `${endpoints.memes}${id}/`,\r\n         requestData,\r\n         apiMethods.patch\r\n      );\r\n   }\r\n\r\n   deleteMemeAPI(id: string): Promise<{}> {\r\n      return networkCallWithAxios(\r\n         this.api,\r\n         `${endpoints.memes}${id}/`,\r\n         {},\r\n         apiMethods.delete\r\n      );\r\n   }\r\n}\r\n\r\nexport default MemesAPIs;\r\n","import MemeModel from \"./MemeModel\";\r\n\r\nexport default MemeModel;\r\n","import { action, observable } from \"mobx\";\r\n\r\nimport { GetMemeResponseType } from \"../../../types/DataTypes\";\r\n\r\nclass MemeModel {\r\n   id: string;\r\n   name: string;\r\n   @observable caption: string;\r\n   @observable url: string;\r\n   @observable deleteAPIStatus!: number;\r\n\r\n   constructor(memeData: GetMemeResponseType) {\r\n      const { id, name, caption, url } = memeData;\r\n      this.id = id;\r\n      this.name = name;\r\n      this.caption = caption;\r\n      this.url = url;\r\n   }\r\n\r\n   @action.bound\r\n   updateCaption(caption: string) {\r\n      this.caption = caption;\r\n   }\r\n\r\n   @action.bound\r\n   updateURL(url: string) {\r\n      this.url = url;\r\n   }\r\n\r\n   @action.bound\r\n   updateDeleteAPIStatus(status: number) {\r\n      this.deleteAPIStatus = status;\r\n   }\r\n}\r\n\r\nexport default MemeModel;\r\n","import MemeStore from \"./MemeStore\";\r\n\r\nexport default MemeStore;\r\n","import { observable, action } from \"mobx\";\r\n\r\nimport { apiStatus } from \"../../../Common/constants/APIConstants\";\r\n\r\nimport { MemesService } from \"../../services/MemesService\";\r\nimport {\r\n   EditMemeRequestType,\r\n   GetMemeResponseType,\r\n   PostMemeRequestType,\r\n   PostMemeResponseType,\r\n} from \"../../types/DataTypes\";\r\n\r\nimport MemeModel from \"../models/MemeModel\";\r\n\r\nclass MemeStore {\r\n   memesService: MemesService;\r\n\r\n   @observable getMemesAPIStatus!: number;\r\n   @observable getMemesAPIError;\r\n   @observable memes: Array<MemeModel>;\r\n   @observable postMemeAPIStatus!: number;\r\n   @observable postMemeAPIError;\r\n   @observable getMemeAPIStatus!: number;\r\n   @observable getMemeAPIError;\r\n   @observable singleMeme: MemeModel | null;\r\n   @observable editMemeAPIStatus!: number;\r\n   @observable editMemeAPIError;\r\n   @observable deleteMemeAPIError;\r\n\r\n   constructor(memesService: MemesService) {\r\n      this.memesService = memesService;\r\n      this.memes = [];\r\n      this.singleMeme = null;\r\n   }\r\n\r\n   @action.bound\r\n   setPostMemeAPIStatus(status: number): void {\r\n      this.postMemeAPIStatus = status;\r\n   }\r\n\r\n   @action.bound\r\n   setPostMemeAPIError(error: any): void {\r\n      this.postMemeAPIError = error;\r\n   }\r\n\r\n   @action.bound\r\n   setPostMemeAPIResponse(\r\n      response: PostMemeResponseType | null,\r\n      requestData: PostMemeRequestType\r\n   ): void {\r\n      if (response) {\r\n         const { id } = response;\r\n         const { name, caption, url } = requestData;\r\n         this.memes.unshift(new MemeModel({ id, name, caption, url }));\r\n      }\r\n   }\r\n\r\n   @action.bound\r\n   async postMemeAPI(\r\n      requestData: PostMemeRequestType,\r\n      onSuccess: Function = (): void => {},\r\n      onFailure: Function = (): void => {}\r\n   ) {\r\n      const postMemePromise = this.memesService.postMemeAPI(requestData);\r\n      this.setPostMemeAPIStatus(apiStatus.loading);\r\n      await postMemePromise\r\n         .then((data) => {\r\n            this.setPostMemeAPIStatus(apiStatus.success);\r\n            this.setPostMemeAPIResponse(data, requestData);\r\n            onSuccess();\r\n         })\r\n         .catch((err) => {\r\n            this.setPostMemeAPIStatus(apiStatus.failed);\r\n            this.setPostMemeAPIError(err);\r\n            onFailure();\r\n         });\r\n   }\r\n\r\n   @action.bound\r\n   setGetMemesAPIStatus(status: number): void {\r\n      this.getMemesAPIStatus = status;\r\n   }\r\n\r\n   @action.bound\r\n   setGetMemesAPIError(error: any): void {\r\n      this.getMemesAPIError = error;\r\n   }\r\n\r\n   @action.bound\r\n   setGetMemesAPIResponse(response: Array<GetMemeResponseType> | null): void {\r\n      if (response) {\r\n         response.forEach((meme) => {\r\n            const { id, name, caption, url } = meme;\r\n            this.memes.push(new MemeModel({ id, name, caption, url }));\r\n         });\r\n      }\r\n   }\r\n\r\n   @action.bound\r\n   async getMemesAPI(\r\n      onSuccess: Function = (): void => {},\r\n      onFailure: Function = (): void => {}\r\n   ) {\r\n      const getMemesPromise = this.memesService.getMemesAPI();\r\n      this.setGetMemesAPIStatus(apiStatus.loading);\r\n      await getMemesPromise\r\n         .then((response) => {\r\n            this.setGetMemesAPIStatus(apiStatus.success);\r\n            this.setGetMemesAPIResponse(response);\r\n            onSuccess();\r\n         })\r\n         .catch((err) => {\r\n            this.setGetMemesAPIStatus(apiStatus.failed);\r\n            this.setGetMemesAPIError(err);\r\n            onFailure();\r\n         });\r\n   }\r\n\r\n   @action.bound\r\n   setGetMemeAPIStatus(status: number): void {\r\n      this.getMemeAPIStatus = status;\r\n   }\r\n\r\n   @action.bound\r\n   setGetMemeAPIError(error: any): void {\r\n      this.getMemeAPIError = error;\r\n   }\r\n\r\n   @action.bound\r\n   setGetMemeAPIResponse(response: GetMemeResponseType | null): void {\r\n      if (response) {\r\n         const { id, name, caption, url } = response;\r\n         this.singleMeme = new MemeModel({ id, name, caption, url });\r\n      }\r\n   }\r\n\r\n   @action.bound\r\n   async getMemeAPI(\r\n      id: string,\r\n      onSuccess: Function = (): void => {},\r\n      onFailure: Function = (): void => {}\r\n   ) {\r\n      const getMemePromise = this.memesService.getMemeAPI(id);\r\n      this.setGetMemeAPIStatus(apiStatus.loading);\r\n      await getMemePromise\r\n         .then((data) => {\r\n            this.setGetMemeAPIStatus(apiStatus.success);\r\n            this.setGetMemeAPIResponse(data);\r\n            onSuccess();\r\n         })\r\n         .catch((err) => {\r\n            this.setGetMemeAPIStatus(apiStatus.failed);\r\n            this.setGetMemeAPIError(err);\r\n            onFailure();\r\n         });\r\n   }\r\n\r\n   @action.bound\r\n   clearSingleMeme() {\r\n      this.singleMeme = null;\r\n   }\r\n\r\n   @action.bound\r\n   setEditMemeAPIStatus(status: number): void {\r\n      this.editMemeAPIStatus = status;\r\n   }\r\n\r\n   @action.bound\r\n   setEditMemeAPIError(error: any): void {\r\n      this.editMemeAPIError = error;\r\n   }\r\n\r\n   @action.bound\r\n   setEditMemeAPIResponse(\r\n      id: string,\r\n      updatedMemeData: EditMemeRequestType\r\n   ): void {\r\n      const meme = this.memes.find((meme) => meme.id === id);\r\n      if (meme) {\r\n         const { caption, url } = updatedMemeData;\r\n         if (caption) {\r\n            meme.updateCaption(caption);\r\n         }\r\n         if (url) {\r\n            meme.updateURL(url);\r\n         }\r\n      }\r\n   }\r\n\r\n   @action.bound\r\n   async editMemeAPI(\r\n      id: string,\r\n      requestData: EditMemeRequestType,\r\n      onSuccess: Function = (): void => {},\r\n      onFailure: Function = (): void => {}\r\n   ) {\r\n      const editMemePromise = this.memesService.editMemeAPI(id, requestData);\r\n      this.setEditMemeAPIStatus(apiStatus.loading);\r\n      await editMemePromise\r\n         .then((data) => {\r\n            this.setEditMemeAPIStatus(apiStatus.success);\r\n            this.setEditMemeAPIResponse(id, requestData);\r\n            onSuccess();\r\n         })\r\n         .catch((err) => {\r\n            this.setEditMemeAPIStatus(apiStatus.failed);\r\n            this.setEditMemeAPIError(err);\r\n            onFailure();\r\n         });\r\n   }\r\n\r\n   @action.bound\r\n   setDeleteMemeAPIStatus(id: string, status: number): void {\r\n      const meme = this.memes.find((meme) => meme.id === id);\r\n      if (meme) {\r\n         meme.updateDeleteAPIStatus(status);\r\n      }\r\n   }\r\n\r\n   @action.bound\r\n   setDeleteMemeAPIError(error: any): void {\r\n      this.deleteMemeAPIError = error;\r\n   }\r\n\r\n   @action.bound\r\n   deleteMeme(id: string): void {\r\n      this.memes = this.memes.filter((meme) => meme.id !== id);\r\n   }\r\n\r\n   @action.bound\r\n   async deleteMemeAPI(\r\n      id: string,\r\n      onSuccess: Function = (): void => {},\r\n      onFailure: Function = (): void => {}\r\n   ) {\r\n      const deleteMemePromise = this.memesService.deleteMemeAPI(id);\r\n      this.setDeleteMemeAPIStatus(id, apiStatus.loading);\r\n      await deleteMemePromise\r\n         .then(() => {\r\n            this.setDeleteMemeAPIStatus(id, apiStatus.success);\r\n            this.deleteMeme(id);\r\n            onSuccess();\r\n         })\r\n         .catch((err) => {\r\n            this.setDeleteMemeAPIStatus(id, apiStatus.failed);\r\n            this.setDeleteMemeAPIError(err);\r\n            onFailure();\r\n         });\r\n   }\r\n}\r\n\r\nexport default MemeStore;\r\n","export const NEW_MEME = \"NEW_MEME\";\r\nexport const EXISTING_MEME = \"EXISTING_MEME\";\r\n","import { action, observable } from \"mobx\";\r\n\r\nimport { NEW_MEME } from \"../../constants/UIConstants\";\r\n\r\nimport MemeModel from \"../models/MemeModel\";\r\n\r\nclass UIStore {\r\n   @observable memeType!: string;\r\n   @observable meme!: MemeModel;\r\n   @observable showMemeModal!: boolean;\r\n   @observable memeId!: string;\r\n\r\n   constructor() {\r\n      this.initStore();\r\n   }\r\n\r\n   @action.bound\r\n   initStore() {\r\n      this.memeType = NEW_MEME;\r\n      this.meme = new MemeModel({ id: \"\", name: \"\", caption: \"\", url: \"\" });\r\n      this.showMemeModal = false;\r\n      this.memeId = \"\";\r\n   }\r\n\r\n   @action.bound\r\n   updateMemeType(mode: string) {\r\n      this.memeType = mode;\r\n   }\r\n\r\n   @action.bound\r\n   updateMemeDetails(meme: MemeModel) {\r\n      this.meme = meme;\r\n   }\r\n\r\n   @action.bound\r\n   updateMemeModalStatus(status: boolean) {\r\n      this.showMemeModal = status;\r\n   }\r\n\r\n   @action.bound\r\n   updateMemeId(id: string) {\r\n      this.memeId = id;\r\n   }\r\n\r\n   @action.bound\r\n   clearStore() {\r\n      this.initStore();\r\n   }\r\n}\r\n\r\nexport default UIStore;\r\n","import MemesAPIs from \"../../XMeme/services/MemesService/index.api\";\r\nimport MemesFixtures from \"../../XMeme/services/MemesService/index.fixture\";\r\nimport MemeStore from \"../../XMeme/stores/MemeStore\";\r\nimport UIStore from \"../../XMeme/stores/UIStore/UIStore\";\r\n\r\nconst useFixtures = false;\r\n\r\nfunction getPostMemeAPIFixture() {\r\n   if (useFixtures) {\r\n      return new MemesFixtures();\r\n   }\r\n   return new MemesAPIs();\r\n}\r\n\r\nconst memeStore = new MemeStore(getPostMemeAPIFixture());\r\n\r\nconst uiStore = new UIStore();\r\nconst stores = { memeStore, uiStore };\r\n\r\nexport default stores;\r\n","export const colors = {\r\n   blueWhale: \"#1C313A\",\r\n   burntOrange10: \"rgba(211, 84, 0, .1)\",\r\n   burntOrange: \"#D35400\",\r\n   concrete: \"#F2F2F2\",\r\n   darkGray10: \"rgba(174, 174, 174, .1)\",\r\n   darkGray: \"#AEAEAE\",\r\n   darkSpringGreen10: \"rgba(20, 89, 52, .1)\",\r\n   darkSpringGreen: \"#145934\",\r\n   eclipse: \"#3F3F3F\",\r\n   ecstasy: \"#F9690E\",\r\n   gainsboro: \"#E0E0E0\",\r\n   gray20: \"#333333\",\r\n   gray31: \"#4F4F4F\",\r\n   gray3: \"#828282\",\r\n   neonBlue: \"#3D5AFE\",\r\n   persianBlue: \"#0039CB\",\r\n   persianRed: \"#D32F2F\",\r\n   royalBlue10: \"rgba(41, 98, 255, .1)\",\r\n   royalBlue: \"#2962FF\",\r\n   salem: \"#1E824C\",\r\n   sanJuan10: \"rgba(69, 90, 100, .1)\",\r\n   sanJuan: \"#455A64\",\r\n   sangria10: \"rgba(154, 0, 7, .1)\",\r\n   sangria: \"#9A0007\",\r\n   white: \"#ffffff\",\r\n};\r\n","export const sizes = { small: \"SMALL\", medium: \"MEDIUM\", large: \"LARGE\" };\r\n\r\nexport const variants = {\r\n   default: \"DEFAULT\",\r\n   outline: \"OUTLINE\",\r\n   text: \"TEXT\",\r\n};\r\n\r\nexport const colors = {\r\n   default: \"DEFAULT\",\r\n   primary: \"PRIMARY\",\r\n   secondary: \"SECONDARY\",\r\n   success: \"SUCCESS\",\r\n   warning: \"WARNING\",\r\n   danger: \"DANGER\",\r\n};\r\n\r\nexport const shapes = {\r\n   round: \"ROUND\",\r\n   square: \"SQUARE\",\r\n   pill: \"PILL\",\r\n};\r\n","import { colors as colorCodes } from \"../../themes/colors\";\r\n\r\nimport { colors } from \"./constants\";\r\n\r\nconst {\r\n   default: defaultColor,\r\n   primary,\r\n   secondary,\r\n   success,\r\n   warning,\r\n   danger,\r\n} = colors;\r\n\r\nexport const getButtonColors = (color) => {\r\n   switch (color) {\r\n      case defaultColor:\r\n         return {\r\n            bgColor: colorCodes.gainsboro,\r\n            hoverBgColorOne: colorCodes.darkGray,\r\n            hoverBgColorTwo: colorCodes.darkGray10,\r\n            textColor: colorCodes.eclipse,\r\n            filledTextColor: colorCodes.eclipse,\r\n         };\r\n      case primary:\r\n         return {\r\n            bgColor: colorCodes.neonBlue,\r\n            hoverBgColorOne: colorCodes.persianBlue,\r\n            hoverBgColorTwo: colorCodes.royalBlue10,\r\n            textColor: colorCodes.neonBlue,\r\n            filledTextColor: colorCodes.white,\r\n         };\r\n      case secondary:\r\n         return {\r\n            bgColor: colorCodes.eclipse,\r\n            hoverBgColorOne: colorCodes.sanJuan,\r\n            hoverBgColorTwo: colorCodes.sanJuan10,\r\n            textColor: colorCodes.eclipse,\r\n            filledTextColor: colorCodes.white,\r\n         };\r\n      case success:\r\n         return {\r\n            bgColor: colorCodes.salem,\r\n            hoverBgColorOne: colorCodes.darkSpringGreen,\r\n            hoverBgColorTwo: colorCodes.darkSpringGreen10,\r\n            textColor: colorCodes.salem,\r\n            filledTextColor: colorCodes.white,\r\n         };\r\n      case warning:\r\n         return {\r\n            bgColor: colorCodes.ecstasy,\r\n            hoverBgColorOne: colorCodes.burntOrange,\r\n            hoverBgColorTwo: colorCodes.burntOrange10,\r\n            textColor: colorCodes.ecstasy,\r\n            filledTextColor: colorCodes.white,\r\n         };\r\n      case danger:\r\n         return {\r\n            bgColor: colorCodes.persianRed,\r\n            hoverBgColorOne: colorCodes.sangria,\r\n            hoverBgColorTwo: colorCodes.sangria10,\r\n            textColor: colorCodes.persianRed,\r\n            filledTextColor: colorCodes.white,\r\n         };\r\n      default:\r\n         return {\r\n            bgColor: colorCodes.gainsboro,\r\n            hoverBgColorOne: colorCodes.darkGray,\r\n            hoverBgColorTwo: colorCodes.darkGray10,\r\n            textColor: colorCodes.eclipse,\r\n            filledTextColor: colorCodes.eclipse,\r\n         };\r\n   }\r\n};\r\n","import tw, { css, styled } from \"twin.macro\";\r\n\r\nimport { shapes, sizes, variants } from \"./constants\";\r\nimport { getButtonColors } from \"./utils\";\r\n\r\nconst { small, medium, large } = sizes;\r\nconst { outline, text, default: defaultType } = variants;\r\nconst { round, square, pill } = shapes;\r\n\r\nconst getSizeStyles = (size) => {\r\n   switch (size) {\r\n      case small:\r\n         return tw`py-6px px-12px`;\r\n      case medium:\r\n         return tw`py-8px px-16px`;\r\n      case large:\r\n         return tw`py-12px px-20px`;\r\n      default:\r\n         return tw`py-8px px-16px`;\r\n   }\r\n};\r\n\r\nconst getVariantAndColorStyles = (variant, color) => {\r\n   const {\r\n      bgColor,\r\n      hoverBgColorOne,\r\n      hoverBgColorTwo,\r\n      textColor,\r\n      filledTextColor,\r\n   } = getButtonColors(color);\r\n   switch (variant) {\r\n      case defaultType:\r\n         return css`\r\n            background-color: ${bgColor};\r\n            border: none;\r\n            &:hover:disabled {\r\n               background-color: ${bgColor};\r\n            }\r\n            &:hover {\r\n               background-color: ${hoverBgColorOne};\r\n            }\r\n            color: ${filledTextColor};\r\n         `;\r\n      case outline:\r\n         return css`\r\n            background: none;\r\n            border: 1px solid ${bgColor};\r\n            &:hover:disabled {\r\n               background: none;\r\n            }\r\n            &:hover {\r\n               background-color: ${hoverBgColorTwo};\r\n            }\r\n            color: ${textColor};\r\n         `;\r\n      case text:\r\n         return css`\r\n            background: none;\r\n            border: none;\r\n            &:hover:disabled {\r\n               background: none;\r\n            }\r\n            &:hover {\r\n               background-color: ${hoverBgColorTwo};\r\n            }\r\n            color: ${textColor};\r\n         `;\r\n      default:\r\n         return css`\r\n            background-color: ${bgColor};\r\n            border: none;\r\n            &:hover:disabled {\r\n               background-color: ${bgColor};\r\n            }\r\n            &:hover {\r\n               background-color: ${hoverBgColorOne};\r\n            }\r\n            color: ${filledTextColor};\r\n         `;\r\n   }\r\n};\r\n\r\nconst getShapeStyles = (shape) => {\r\n   switch (shape) {\r\n      case square:\r\n         return tw`rounded-6px`;\r\n      case round:\r\n         return tw`rounded-full`;\r\n      case pill:\r\n         return tw`rounded-50px`;\r\n      default:\r\n         return tw`rounded-6px`;\r\n   }\r\n};\r\n\r\nexport const StyledButton = styled.button(\r\n   ({ size, variant, color, shape, disableShadow, disabled }) => [\r\n      tw`outline-none border-none focus:outline-none flex justify-center items-center`,\r\n      getSizeStyles(size),\r\n      getVariantAndColorStyles(variant, color),\r\n      getShapeStyles(shape),\r\n      disableShadow ? tw`` : tw`shadow-sm`,\r\n      disabled ? tw`cursor-not-allowed opacity-50` : tw`cursor-pointer`,\r\n   ]\r\n);\r\n\r\nexport const IconContainer = styled.div`\r\n   ${tw`\r\n      flex items-center\r\n   `}\r\n`;\r\n\r\nexport const StartIconContainer = styled(IconContainer)`\r\n   ${tw`\r\n      mr-8px\r\n    `}\r\n`;\r\n\r\nexport const EndIconContainer = styled(IconContainer)`\r\n   ${tw`\r\n        ml-8px\r\n    `}\r\n`;\r\n\r\nexport const Icon = styled.i``;\r\n","import React, { Component, ReactElement, ReactNode } from \"react\";\r\nimport { ClipLoader } from \"react-spinners\";\r\n\r\nimport { getButtonColors } from \"./utils\";\r\nimport { colors, shapes, sizes, variants } from \"./constants\";\r\nimport {\r\n   EndIconContainer,\r\n   Icon,\r\n   StartIconContainer,\r\n   StyledButton,\r\n} from \"./styledComponents\";\r\n\r\ninterface ButtonProps {\r\n   onClick: Function;\r\n   disabled: boolean;\r\n   loading: boolean;\r\n   size: string;\r\n   variant: string;\r\n   color: string;\r\n   shape: string;\r\n   startIcon: string;\r\n   endIcon: string;\r\n   disableShadow: boolean;\r\n   className: string;\r\n}\r\n\r\nclass Button extends Component<ButtonProps> {\r\n   static defaultProps = {\r\n      onClick: () => {},\r\n      disabled: false,\r\n      loading: false,\r\n      size: sizes.medium,\r\n      variant: variants.default,\r\n      color: colors.default,\r\n      shape: shapes.square,\r\n      startIcon: \"\",\r\n      endIcon: \"\",\r\n      disableShadow: false,\r\n      className: \"\",\r\n   };\r\n\r\n   static sizes = sizes;\r\n   static colors = colors;\r\n   static shapes = shapes;\r\n   static variants = variants;\r\n\r\n   renderButtonStartIcon = (): ReactNode => {\r\n      const { startIcon } = this.props;\r\n      if (startIcon) {\r\n         return (\r\n            <StartIconContainer>\r\n               <Icon className=\"material-icons\">{startIcon}</Icon>\r\n            </StartIconContainer>\r\n         );\r\n      }\r\n      return null;\r\n   };\r\n\r\n   renderButtonEndIcon = (): ReactNode => {\r\n      const { endIcon } = this.props;\r\n      if (endIcon) {\r\n         return (\r\n            <EndIconContainer>\r\n               <Icon className=\"material-icons\">{endIcon}</Icon>\r\n            </EndIconContainer>\r\n         );\r\n      }\r\n      return null;\r\n   };\r\n\r\n   renderButtonChild = (): ReactNode => {\r\n      const { loading, children, color } = this.props;\r\n      const { filledTextColor } = getButtonColors(color);\r\n      if (loading) {\r\n         return (\r\n            <ClipLoader size={18} color={filledTextColor} loading={loading} />\r\n         );\r\n      }\r\n      return <>{children}</>;\r\n   };\r\n\r\n   render(): ReactElement {\r\n      const {\r\n         size,\r\n         variant,\r\n         color,\r\n         shape,\r\n         disableShadow,\r\n         disabled,\r\n         loading,\r\n         className,\r\n         onClick,\r\n         ...other\r\n      } = this.props;\r\n      return (\r\n         <StyledButton\r\n            className={className}\r\n            size={size}\r\n            variant={variant}\r\n            color={color}\r\n            shape={shape}\r\n            disableShadow={disableShadow}\r\n            disabled={disabled}\r\n            onClick={onClick}\r\n            {...other}\r\n         >\r\n            {this.renderButtonStartIcon()}\r\n            {this.renderButtonChild()}\r\n            {this.renderButtonEndIcon()}\r\n         </StyledButton>\r\n      );\r\n   }\r\n}\r\n\r\nexport default Button;\r\n","import Button from \"./Button\";\r\n\r\nexport default Button;\r\n","import tw, { styled } from \"twin.macro\";\r\n\r\nexport const HeaderContainer = styled.div`\r\n   ${tw`\r\n        flex flex-col justify-center items-center shadow\r\n    `}\r\n   height: 100px;\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n   ${tw`\r\n        p-0 m-0\r\n    `}\r\n`;\r\n\r\nexport const Description = styled.p`\r\n   ${tw`\r\n        p-0 m-0 mt-4px\r\n    `}\r\n`;\r\n","import React from \"react\";\r\n\r\nimport { Description, HeaderContainer, Title } from \"./styledComponents\";\r\n\r\nfunction Header() {\r\n   return (\r\n      <HeaderContainer>\r\n         <Title>XMeme</Title>\r\n         <Description>Post your memes and enjoy!</Description>\r\n      </HeaderContainer>\r\n   );\r\n}\r\n\r\nexport default Header;\r\n","import Header from \"./Header\";\r\n\r\nexport default Header;\r\n","export const urlRegex = /(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})/gi;\r\n","export const sizes = { small: 'SMALL', medium: 'MEDIUM', large: 'LARGE' }\r\n\r\nexport const colors = {\r\n   default: 'DEFAULT',\r\n   primary: 'PRIMARY',\r\n   secondary: 'SECONDARY',\r\n   success: 'SUCCESS',\r\n   warning: 'WARNING',\r\n   danger: 'DANGER',\r\n}\r\n\r\nexport const shapes = {\r\n   rectangle: 'RECTANGLE',\r\n   square: 'SQUARE',\r\n}\r\n","import tw, { styled, TwStyle } from \"twin.macro\";\r\n\r\nimport { colors, shapes, sizes } from \"./constants\";\r\n\r\nconst getShapeStyles = (shape: string): TwStyle => {\r\n   switch (shape) {\r\n      case shapes.rectangle:\r\n         return tw`rounded-none`;\r\n      case shapes.square:\r\n         return tw`rounded-4px`;\r\n      default:\r\n         return tw`rounded-4px`;\r\n   }\r\n};\r\n\r\nconst getSizeStyles = (size: string, startIcon: string, endIcon: string) => {\r\n   switch (size) {\r\n      case sizes.small:\r\n         return startIcon\r\n            ? tw`p-8px pl-32px`\r\n            : endIcon\r\n            ? tw`p-8px pr-32px`\r\n            : tw`p-8px`;\r\n      case sizes.medium:\r\n         return startIcon\r\n            ? tw`p-12px pl-36px`\r\n            : endIcon\r\n            ? tw`p-12px pr-36px`\r\n            : tw`p-12px`;\r\n      case sizes.large:\r\n         return startIcon\r\n            ? tw`p-20px pl-44px`\r\n            : endIcon\r\n            ? tw`p-20px pr-44px`\r\n            : tw`p-20px`;\r\n      default:\r\n         return startIcon\r\n            ? tw`p-12px pl-36px`\r\n            : endIcon\r\n            ? tw`p-12px pr-36px`\r\n            : tw`p-12px`;\r\n   }\r\n};\r\n\r\nconst getInputColorStyles = (color: string) => {\r\n   switch (color) {\r\n      case colors.default:\r\n         return tw`focus:border-royalBlue`;\r\n      case colors.primary:\r\n         return tw`focus:border-royalBlue`;\r\n      case colors.secondary:\r\n         return tw`focus:border-gray3`;\r\n      case colors.warning:\r\n         return tw`focus:border-ecstasy`;\r\n      case colors.success:\r\n         return tw`focus:border-salem`;\r\n      case colors.danger:\r\n         return tw`focus:border-persianRed`;\r\n      default:\r\n         return tw`focus:border-royalBlue`;\r\n   }\r\n};\r\n\r\nconst getTextColorStyles = (color: string, error: boolean) => {\r\n   if (error) {\r\n      return tw`text-persianRed`;\r\n   }\r\n   switch (color) {\r\n      case colors.default:\r\n         return tw`text-royalBlue`;\r\n      case colors.primary:\r\n         return tw`text-royalBlue`;\r\n      case colors.secondary:\r\n         return tw`text-gray3`;\r\n      case colors.warning:\r\n         return tw`text-ecstasy`;\r\n      case colors.success:\r\n         return tw`text-salem`;\r\n      case colors.danger:\r\n         return tw`text-persianRed`;\r\n      default:\r\n         return tw`text-royalBlue`;\r\n   }\r\n};\r\n\r\nexport const LabelAndInputContainer = styled.div`\r\n   ${tw`\r\n      w-full flex flex-col\r\n   `}\r\n`;\r\n\r\nexport const InputLabel = styled.span(({ error, color, hasFocused }) => [\r\n   hasFocused && getTextColorStyles(color, error),\r\n   error && tw`text-persianRed`,\r\n]);\r\n\r\nexport const InputContainer = styled.div`\r\n   ${tw`\r\n      flex items-center relative\r\n   `}\r\n`;\r\nconst IconContainer = styled.div`\r\n   ${tw`\r\n      mt-8px absolute\r\n   `}\r\n`;\r\n\r\nexport const StartIconContainer = styled(IconContainer)`\r\n   left: 8px;\r\n`;\r\n\r\nexport const EndIconContainer = styled(IconContainer)`\r\n   right: 8px;\r\n`;\r\n\r\nexport const Icon = styled.i``;\r\n\r\nexport const TextInput = styled.input(\r\n   ({ error, size, shape, color, disabled, fullWidth, startIcon, endIcon }) => [\r\n      tw`mt-8px border border-solid border-gray20 outline-none`,\r\n      getShapeStyles(shape),\r\n      getSizeStyles(size, startIcon, endIcon),\r\n      getInputColorStyles(color),\r\n      error && tw`border-persianRed focus:border-persianRed`,\r\n      disabled\r\n         ? tw`cursor-not-allowed border-gainsboro bg-concrete`\r\n         : tw`cursor-auto`,\r\n      fullWidth ? tw`w-full` : tw`w-maxContent`,\r\n   ]\r\n);\r\n\r\nexport const TextArea = styled.textarea(\r\n   ({ error, size, shape, color, disabled, fullWidth, startIcon, endIcon }) => [\r\n      tw`mt-8px border border-solid border-gray20 outline-none resize-none`,\r\n      getShapeStyles(shape),\r\n      getSizeStyles(size, startIcon, endIcon),\r\n      getInputColorStyles(color),\r\n      error && tw`border-persianRed focus:border-persianRed`,\r\n      disabled\r\n         ? tw`cursor-not-allowed border-gainsboro bg-concrete`\r\n         : tw`cursor-auto`,\r\n      fullWidth ? tw`` : tw`w-maxContent`,\r\n   ]\r\n);\r\n\r\nexport const InputHint = styled.span(({ error, color, hasFocused }) => [\r\n   tw`mt-8px`,\r\n   hasFocused && getTextColorStyles(color, error),\r\n   error && tw`text-persianRed`,\r\n]);\r\n","import React, { Component, ReactNode } from 'react'\r\n\r\nimport { colors, shapes, sizes } from './constants'\r\nimport {\r\n   EndIconContainer,\r\n   Icon,\r\n   InputContainer,\r\n   InputHint,\r\n   InputLabel,\r\n   LabelAndInputContainer,\r\n   StartIconContainer,\r\n   TextArea,\r\n   TextInput,\r\n} from './styledComponents'\r\n\r\ninterface InputProps {\r\n   label: string\r\n   error: boolean\r\n   disabled: boolean\r\n   size: string\r\n   color: string\r\n   shape: string\r\n   fullWidth: boolean\r\n   multiline: boolean\r\n   rows: number\r\n   startIcon: string\r\n   endIcon: string\r\n   onChangeInput: (event: React.FormEvent<HTMLInputElement>) => void\r\n   input: string\r\n   hint: string\r\n   type: string\r\n   placeholder: string\r\n   className: string\r\n}\r\n\r\nclass Input extends Component<InputProps> {\r\n   state = {\r\n      hasFocused: false,\r\n   }\r\n\r\n   static defaultProps = {\r\n      label: '',\r\n      error: false,\r\n      disabled: false,\r\n      size: sizes.medium,\r\n      color: colors.primary,\r\n      shape: shapes.square,\r\n      fullWidth: false,\r\n      multiline: false,\r\n      rows: 0,\r\n      startIcon: '',\r\n      endIcon: '',\r\n      placeholder: 'Enter text',\r\n      onChangeInput: () => {},\r\n      input: '',\r\n      hint: '',\r\n      type: 'text',\r\n      className: '',\r\n   }\r\n\r\n   static sizes = sizes\r\n   static colors = colors\r\n   static shapes = shapes\r\n\r\n   renderStartIcon = (): ReactNode => {\r\n      const { startIcon, multiline } = this.props\r\n      return startIcon && !multiline ? (\r\n         <StartIconContainer>\r\n            <Icon className='material-icons'>{startIcon}</Icon>\r\n         </StartIconContainer>\r\n      ) : null\r\n   }\r\n\r\n   renderEndIcon = (): ReactNode => {\r\n      const { endIcon, multiline } = this.props\r\n      return endIcon && !multiline ? (\r\n         <EndIconContainer>\r\n            <Icon className='material-icons'>{endIcon}</Icon>\r\n         </EndIconContainer>\r\n      ) : null\r\n   }\r\n\r\n   onFocus = (): void => {\r\n      this.setState({ hasFocused: true })\r\n   }\r\n\r\n   onBlur = (): void => {\r\n      this.setState({ hasFocused: false })\r\n   }\r\n\r\n   renderInputOrTextArea = (): ReactNode => {\r\n      const {\r\n         type,\r\n         input,\r\n         placeholder,\r\n         onChangeInput,\r\n         label,\r\n         hint,\r\n         size,\r\n         shape,\r\n         fullWidth,\r\n         color,\r\n         disabled,\r\n         error,\r\n         multiline,\r\n         rows,\r\n         startIcon,\r\n         endIcon,\r\n         className,\r\n         ...other\r\n      } = this.props\r\n      return multiline ? (\r\n         <TextArea\r\n            type={type}\r\n            value={input}\r\n            placeholder={placeholder}\r\n            onChange={onChangeInput}\r\n            size={size}\r\n            shape={shape}\r\n            color={color}\r\n            error={error}\r\n            disabled={disabled}\r\n            fullWidth={fullWidth}\r\n            onFocus={this.onFocus}\r\n            onBlur={this.onBlur}\r\n            rows={rows}\r\n            className={className}\r\n            startIcon={startIcon}\r\n            endIcon={endIcon}\r\n            {...other}\r\n         />\r\n      ) : (\r\n         <TextInput\r\n            type={type}\r\n            value={input}\r\n            placeholder={placeholder}\r\n            onChange={onChangeInput}\r\n            size={size}\r\n            shape={shape}\r\n            color={color}\r\n            error={error}\r\n            disabled={disabled}\r\n            fullWidth={fullWidth}\r\n            onFocus={this.onFocus}\r\n            onBlur={this.onBlur}\r\n            className={className}\r\n            startIcon={startIcon}\r\n            endIcon={endIcon}\r\n            {...other}\r\n         />\r\n      )\r\n   }\r\n\r\n   render() {\r\n      const { label, hint, color, error } = this.props\r\n      const { hasFocused } = this.state\r\n      return (\r\n         <LabelAndInputContainer>\r\n            <InputLabel error={error} color={color} hasFocused={hasFocused}>\r\n               {label}\r\n            </InputLabel>\r\n            <InputContainer>\r\n               {this.renderStartIcon()}\r\n               {this.renderInputOrTextArea()}\r\n               {this.renderEndIcon()}\r\n            </InputContainer>\r\n            <InputHint error={error} color={color} hasFocused={hasFocused}>\r\n               {hint}\r\n            </InputHint>\r\n         </LabelAndInputContainer>\r\n      )\r\n   }\r\n}\r\n\r\nexport default Input\r\n","import Input from './Input'\r\n\r\nexport default Input\r\n","import tw, { styled } from \"twin.macro\";\r\n\r\nimport Button from \"../../../Common/components/Button\";\r\nimport Input from \"../../../Common/components/Input\";\r\n\r\nexport const FormContainer = styled.div`\r\n   ${tw`\r\n        w-full md:w-2/5 flex md:p-32px\r\n    `}\r\n`;\r\n\r\nexport const Form = styled.form`\r\n   ${tw`\r\n        w-full\r\n    `}\r\n`;\r\n\r\nexport const FormInputContainer = styled.div`\r\n   ${tw`\r\n        flex flex-col mt-12px\r\n    `}\r\n`;\r\n\r\nexport const FormInput = styled(Input)``;\r\n\r\nexport const Message = styled.p`\r\n   ${tw`\r\n        text-sangria flex items-center p-0 m-0 my-8px\r\n    `}\r\n`;\r\n\r\nexport const ButtonsContainer = styled.div`\r\n   ${tw`\r\n        flex\r\n    `}\r\n`;\r\n\r\nexport const MemeSubmitButton = styled(Button)`\r\n   ${tw`\r\n        mt-12px border border-solid border-2\r\n    `}\r\n   width: 135px;\r\n   &:focus {\r\n      ${tw`\r\n            border-blue-800\r\n        `}\r\n   }\r\n`;\r\n\r\nexport const ExitMemeEditModeButton = styled(MemeSubmitButton)`\r\n   ${tw`\r\n        w-auto\r\n    `}\r\n   &:focus {\r\n      ${tw`\r\n            border-red-800\r\n        `}\r\n   }\r\n`;\r\n","import MemeForm from \"./MemeForm\";\r\n\r\nexport default MemeForm;\r\n","import React, { Component, ReactElement } from \"react\";\r\nimport { observable, reaction } from \"mobx\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport cogoToast from \"cogo-toast\";\r\nimport { GiBeveledStar } from \"react-icons/gi\";\r\n\r\nimport Button from \"../../../Common/components/Button\";\r\nimport {\r\n   getParsedErrorMessage,\r\n   isFetching,\r\n} from \"../../../Common/utils/APIUtils\";\r\nimport { urlRegex } from \"../../../Common/constants/RegexConstants\";\r\n\r\nimport {\r\n   EditMemeRequestType,\r\n   PostMemeRequestType,\r\n} from \"../../types/DataTypes\";\r\nimport UIStore from \"../../stores/UIStore\";\r\nimport { EXISTING_MEME, NEW_MEME } from \"../../constants/UIConstants\";\r\nimport MemeModel from \"../../stores/models/MemeModel\";\r\n\r\nimport {\r\n   ButtonsContainer,\r\n   ExitMemeEditModeButton,\r\n   Form,\r\n   FormContainer,\r\n   FormInput,\r\n   FormInputContainer,\r\n   MemeSubmitButton,\r\n   Message,\r\n} from \"./styledComponents\";\r\n\r\ninterface MemeFormProps {\r\n   postMemeAPI: (\r\n      data: PostMemeRequestType,\r\n      onSuccess: () => void,\r\n      onFailure: () => void\r\n   ) => void;\r\n   postMemeAPIStatus: number;\r\n   postMemeAPIError;\r\n   editMemeAPI: (\r\n      id: string,\r\n      data: EditMemeRequestType,\r\n      onSuccess: () => void,\r\n      onFailure: () => void\r\n   ) => void;\r\n   editMemeAPIStatus: number;\r\n   editMemeAPIError;\r\n}\r\n\r\ninterface InjectedProps extends MemeFormProps {\r\n   uiStore: UIStore;\r\n}\r\n\r\n@inject(\"uiStore\")\r\n@observer\r\nclass MemeForm extends Component<MemeFormProps> {\r\n   @observable name!: string;\r\n   @observable caption!: string;\r\n   @observable url!: string;\r\n\r\n   constructor(props) {\r\n      super(props);\r\n      this.initFormData();\r\n   }\r\n\r\n   componentWillUnmount() {\r\n      this.getMemeDetailsFromUIStore();\r\n   }\r\n\r\n   initFormData = () => {\r\n      this.name = \"\";\r\n      this.caption = \"\";\r\n      this.url = \"\";\r\n   };\r\n\r\n   get injectedProps(): InjectedProps {\r\n      return this.props as InjectedProps;\r\n   }\r\n\r\n   get uiStore(): UIStore {\r\n      const { uiStore } = this.injectedProps;\r\n      return uiStore;\r\n   }\r\n\r\n   getMemeDetailsFromUIStore = reaction(\r\n      () => {\r\n         const { meme } = this.uiStore;\r\n         return meme;\r\n      },\r\n      (meme: MemeModel) => {\r\n         const { memeType } = this.uiStore;\r\n         const { name, caption, url } = meme;\r\n         if (memeType === EXISTING_MEME) {\r\n            this.name = name;\r\n            this.caption = caption;\r\n            this.url = url;\r\n         }\r\n      }\r\n   );\r\n\r\n   onChangeName = (event) => {\r\n      this.name = event.target.value;\r\n   };\r\n\r\n   onChangeCaption = (event) => {\r\n      this.caption = event.target.value;\r\n   };\r\n\r\n   onChangeURL = (event) => {\r\n      this.url = event.target.value;\r\n   };\r\n\r\n   onSuccessPostingMeme = () => {\r\n      cogoToast.success(\"Meme added successfully!\", {\r\n         position: \"bottom-center\",\r\n      });\r\n      this.initFormData();\r\n   };\r\n\r\n   onFailurePostingMeme = () => {\r\n      const { postMemeAPIError } = this.props;\r\n      cogoToast.error(getParsedErrorMessage(postMemeAPIError), {\r\n         position: \"bottom-center\",\r\n      });\r\n   };\r\n\r\n   postMemeAPI = () => {\r\n      const { postMemeAPI } = this.props;\r\n      if (this.name && this.caption && this.url) {\r\n         if (this.url.match(urlRegex)) {\r\n            postMemeAPI(\r\n               { name: this.name, caption: this.caption, url: this.url },\r\n               this.onSuccessPostingMeme,\r\n               this.onFailurePostingMeme\r\n            );\r\n         } else {\r\n            cogoToast.error(\"Enter a valid URL!\", {\r\n               position: \"bottom-center\",\r\n            });\r\n         }\r\n      } else {\r\n         cogoToast.error(\"Fill all the fields!\", {\r\n            position: \"bottom-center\",\r\n         });\r\n      }\r\n   };\r\n\r\n   onSuccessEditMeme = () => {\r\n      cogoToast.success(\"Meme edited successfully!\", {\r\n         position: \"bottom-center\",\r\n      });\r\n      this.changeMemeTypeToNew();\r\n   };\r\n\r\n   onFailureEditMeme = () => {\r\n      const { editMemeAPIError } = this.props;\r\n      cogoToast.error(getParsedErrorMessage(editMemeAPIError), {\r\n         position: \"bottom-center\",\r\n      });\r\n   };\r\n\r\n   editMemeAPI = () => {\r\n      const { editMemeAPI } = this.props;\r\n      const { meme } = this.uiStore;\r\n      if (meme.caption !== this.caption || meme.url !== this.url) {\r\n         if (this.caption && this.url) {\r\n            editMemeAPI(\r\n               meme.id,\r\n               { caption: this.caption, url: this.url },\r\n               this.onSuccessEditMeme,\r\n               this.onFailureEditMeme\r\n            );\r\n         } else {\r\n            cogoToast.error(\"Fill all the fields!\", {\r\n               position: \"bottom-center\",\r\n            });\r\n         }\r\n      } else {\r\n         cogoToast.error(\"Change the details to update the meme\", {\r\n            position: \"bottom-center\",\r\n         });\r\n      }\r\n   };\r\n\r\n   onSubmitMeme = (event) => {\r\n      event.preventDefault();\r\n      const { memeType } = this.uiStore;\r\n      if (memeType === EXISTING_MEME) {\r\n         this.editMemeAPI();\r\n      } else {\r\n         this.postMemeAPI();\r\n      }\r\n   };\r\n\r\n   changeMemeTypeToNew = () => {\r\n      const { clearStore } = this.uiStore;\r\n      this.initFormData();\r\n      clearStore();\r\n   };\r\n\r\n   render(): ReactElement {\r\n      const { postMemeAPIStatus, editMemeAPIStatus } = this.props;\r\n      const { memeType } = this.uiStore;\r\n      const showButtonLoader =\r\n         isFetching(postMemeAPIStatus) || isFetching(editMemeAPIStatus);\r\n      return (\r\n         <FormContainer>\r\n            <Form onSubmit={this.onSubmitMeme}>\r\n               <FormInputContainer>\r\n                  <FormInput\r\n                     label=\"Meme Owner\"\r\n                     placeholder=\"Enter your full name\"\r\n                     input={this.name}\r\n                     onChange={this.onChangeName}\r\n                     fullWidth\r\n                     disabled={memeType === EXISTING_MEME}\r\n                  />\r\n               </FormInputContainer>\r\n               <FormInputContainer>\r\n                  <FormInput\r\n                     label=\"Caption\"\r\n                     placeholder=\"Be creative with the caption\"\r\n                     input={this.caption}\r\n                     onChange={this.onChangeCaption}\r\n                     fullWidth\r\n                  />\r\n               </FormInputContainer>\r\n               <FormInputContainer>\r\n                  <FormInput\r\n                     label=\"Meme URL\"\r\n                     placeholder=\"Enter URL of your meme here\"\r\n                     input={this.url}\r\n                     onChange={this.onChangeURL}\r\n                     fullWidth\r\n                  />\r\n               </FormInputContainer>\r\n               <Message>\r\n                  <GiBeveledStar size={16} /> All fields are required\r\n               </Message>\r\n               <ButtonsContainer>\r\n                  <MemeSubmitButton\r\n                     size={Button.sizes.large}\r\n                     color={Button.colors.primary}\r\n                     type=\"submit\"\r\n                     loading={showButtonLoader}\r\n                     disabled={showButtonLoader}\r\n                  >\r\n                     {memeType === NEW_MEME ? \"Submit Meme\" : \"Update Meme\"}\r\n                  </MemeSubmitButton>\r\n                  {memeType === EXISTING_MEME ? (\r\n                     <ExitMemeEditModeButton\r\n                        size={Button.sizes.large}\r\n                        color={Button.colors.danger}\r\n                        type=\"button\"\r\n                        onClick={this.changeMemeTypeToNew}\r\n                     >\r\n                        Exit Editing Mode\r\n                     </ExitMemeEditModeButton>\r\n                  ) : null}\r\n               </ButtonsContainer>\r\n            </Form>\r\n         </FormContainer>\r\n      );\r\n   }\r\n}\r\n\r\nexport default MemeForm;\r\n","export default __webpack_public_path__ + \"static/media/404.c54ecf1f.svg\";","import tw, { styled } from \"twin.macro\";\r\nimport Button from \"../../../Common/components/Button\";\r\n\r\nexport const MemeContainer = styled.div`\r\n   ${tw`\r\n        w-full flex mb-24px flex-col rounded-6px cursor-pointer\r\n    `}\r\n   box-shadow: 1.5px 2.5px 2.5px rgba(0, 0, 0, 0.4);\r\n`;\r\n\r\nexport const MemeBar = styled.div`\r\n   ${tw`\r\n        flex justify-between mx-12px\r\n    `}\r\n`;\r\n\r\nexport const MemeTitleBar = styled(MemeBar)`\r\n   ${tw`\r\n        mt-12px\r\n    `}\r\n`;\r\n\r\nexport const MemeOwnerName = styled.span`\r\n   ${tw`\r\n        font-bold\r\n    `}\r\n`;\r\n\r\nexport const MemePostedTime = styled.span``;\r\n\r\nexport const MemeSubTitleBar = styled(MemeBar)`\r\n   ${tw`\r\n        my-8px\r\n    `}\r\n`;\r\n\r\nexport const MemeCaption = styled.span`\r\n   ${tw`\r\n        font-semibold\r\n    `}\r\n`;\r\n\r\nexport const MemeOptionsContainer = styled.div`\r\n   ${tw`\r\n      flex\r\n   `}\r\n`;\r\n\r\nexport const EditButton = styled(Button)`\r\n   ${tw`\r\n      bg-transparent p-4px shadow-none\r\n   `}\r\n   &:hover {\r\n      ${tw`\r\n         bg-transparent\r\n      `}\r\n   }\r\n`;\r\n\r\nexport const DeleteButton = styled(EditButton)`\r\n   ${tw`\r\n      ml-8px\r\n   `}\r\n`;\r\n\r\nexport const MemeImageContainer = styled.div`\r\n   ${tw`\r\n      flex\r\n   `}\r\n`;\r\n\r\nexport const MemeImage = styled.img`\r\n   ${tw`\r\n        w-full object-cover rounded-b-6px\r\n    `}\r\n`;\r\n","import React, { Component } from \"react\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport { FaRegEdit } from \"react-icons/fa\";\r\nimport { AiFillDelete } from \"react-icons/ai\";\r\n\r\nimport notFoundLogo from \"../../../assets/img/404.svg\";\r\n\r\nimport MemeModel from \"../../stores/models/MemeModel\";\r\nimport UIStore from \"../../stores/UIStore\";\r\nimport { EXISTING_MEME } from \"../../constants/UIConstants\";\r\n\r\nimport {\r\n   DeleteButton,\r\n   EditButton,\r\n   MemeCaption,\r\n   MemeContainer,\r\n   MemeImage,\r\n   MemeImageContainer,\r\n   MemeOptionsContainer,\r\n   MemeOwnerName,\r\n   MemeSubTitleBar,\r\n   MemeTitleBar,\r\n} from \"./styledComponents\";\r\nimport {\r\n   getParsedErrorMessage,\r\n   isFetching,\r\n} from \"../../../Common/utils/APIUtils\";\r\nimport cogoToast from \"cogo-toast\";\r\n\r\ninterface MemeProps {\r\n   meme: MemeModel;\r\n   deleteMemeAPI: (\r\n      id: string,\r\n      onSuccess: () => void,\r\n      onFailure: () => void\r\n   ) => void;\r\n   deleteMemeAPIError;\r\n}\r\n\r\ninterface InjectedProps extends MemeProps {\r\n   uiStore: UIStore;\r\n}\r\n\r\n@inject(\"uiStore\")\r\n@observer\r\nclass Meme extends Component<MemeProps> {\r\n   get injectedProps(): InjectedProps {\r\n      return this.props as InjectedProps;\r\n   }\r\n\r\n   get uiStore(): UIStore {\r\n      const { uiStore } = this.injectedProps;\r\n      return uiStore;\r\n   }\r\n\r\n   editMeme = (event) => {\r\n      event.stopPropagation();\r\n      const { meme } = this.props;\r\n      const { updateMemeType, updateMemeDetails } = this.uiStore;\r\n      updateMemeType(EXISTING_MEME);\r\n      updateMemeDetails(meme);\r\n   };\r\n\r\n   onSuccessDeleteMeme = () => {\r\n      cogoToast.success(\"Meme deleted successfully!\", {\r\n         position: \"bottom-center\",\r\n      });\r\n   };\r\n\r\n   onFailureDeleteMeme = () => {\r\n      const { deleteMemeAPIError } = this.props;\r\n      cogoToast.error(getParsedErrorMessage(deleteMemeAPIError), {\r\n         position: \"bottom-center\",\r\n      });\r\n   };\r\n\r\n   deleteMemeAPI = (event) => {\r\n      event.stopPropagation();\r\n      const {\r\n         deleteMemeAPI,\r\n         meme: { id },\r\n      } = this.props;\r\n      deleteMemeAPI(id, this.onSuccessDeleteMeme, this.onFailureDeleteMeme);\r\n   };\r\n\r\n   openMemeModal = (): void => {\r\n      const { updateMemeModalStatus, updateMemeId } = this.uiStore;\r\n      const {\r\n         meme: { id },\r\n      } = this.props;\r\n      updateMemeId(id);\r\n      updateMemeModalStatus(true);\r\n   };\r\n\r\n   render() {\r\n      const {\r\n         meme: { id, name, caption, url, deleteAPIStatus },\r\n      } = this.props;\r\n      const {\r\n         memeType,\r\n         meme: { id: editingMemeId },\r\n      } = this.uiStore;\r\n      const showLoader = isFetching(deleteAPIStatus);\r\n      const disableDeleteButton =\r\n         showLoader || (memeType === EXISTING_MEME && id === editingMemeId);\r\n      return (\r\n         <MemeContainer onClick={this.openMemeModal}>\r\n            <MemeTitleBar>\r\n               <MemeOwnerName>{name}</MemeOwnerName>\r\n            </MemeTitleBar>\r\n            <MemeSubTitleBar>\r\n               <MemeCaption>{caption}</MemeCaption>\r\n               <MemeOptionsContainer>\r\n                  <EditButton onClick={this.editMeme}>\r\n                     <FaRegEdit size={16} />\r\n                  </EditButton>\r\n                  <DeleteButton\r\n                     onClick={this.deleteMemeAPI}\r\n                     loading={showLoader}\r\n                     disabled={disableDeleteButton}\r\n                  >\r\n                     <AiFillDelete size={16} />\r\n                  </DeleteButton>\r\n               </MemeOptionsContainer>\r\n            </MemeSubTitleBar>\r\n            <MemeImageContainer>\r\n               <MemeImage\r\n                  alt={caption}\r\n                  src={url}\r\n                  onError={(event) => {\r\n                     event.target.src = notFoundLogo;\r\n                  }}\r\n               />\r\n            </MemeImageContainer>\r\n         </MemeContainer>\r\n      );\r\n   }\r\n}\r\n\r\nexport default Meme;\r\n","import tw, { styled } from \"twin.macro\";\r\n\r\nexport const MemesContainer = styled.div`\r\n   ${tw`\r\n        w-full md:w-3/5 pt-24px md:pl-2px md:pr-16px md:overflow-y-auto\r\n    `}\r\n   display: grid;\r\n   grid-gap: 24px;\r\n   grid-template-columns: 1fr;\r\n   @media (min-width: 768px) {\r\n      ${({ memesEmpty }) =>\r\n         memesEmpty\r\n            ? `grid-template-columns: 1fr;`\r\n            : `grid-template-columns: 1fr 1fr;`}\r\n   }\r\n`;\r\n\r\nexport const NoMemesMessage = styled.span`\r\n   ${tw`\r\n        mx-auto self-center\r\n    `}\r\n`;\r\n","import Memes from \"./Memes\";\r\n\r\nexport default Memes;\r\n","import React, { Component } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport MemeModel from \"../../stores/models/MemeModel\";\r\nimport Meme from \"../Meme/Meme\";\r\n\r\nimport { MemesContainer, NoMemesMessage } from \"./styledComponents\";\r\n\r\ninterface MemesProps {\r\n   memes: Array<MemeModel>;\r\n   deleteMemeAPI: (\r\n      id: string,\r\n      onSuccess: () => void,\r\n      onFailure: () => void\r\n   ) => void;\r\n   deleteMemeAPIError;\r\n}\r\n\r\n@observer\r\nclass Memes extends Component<MemesProps> {\r\n   render() {\r\n      const { memes, deleteMemeAPI, deleteMemeAPIError } = this.props;\r\n      const totalMemes = memes.length;\r\n      const firstHalfMemes = memes.slice(0, Math.ceil(totalMemes / 2));\r\n      const secondHalfMemes = memes.slice(\r\n         Math.ceil(totalMemes / 2),\r\n         totalMemes\r\n      );\r\n      const memesEmpty = memes.length === 0;\r\n      return (\r\n         <MemesContainer memesEmpty={memesEmpty}>\r\n            {memesEmpty ? (\r\n               <NoMemesMessage>No Memes &#128533;</NoMemesMessage>\r\n            ) : (\r\n               <>\r\n                  <div>\r\n                     {firstHalfMemes.map((meme) => (\r\n                        <Meme\r\n                           key={meme.id}\r\n                           meme={meme}\r\n                           deleteMemeAPI={deleteMemeAPI}\r\n                           deleteMemeAPIError={deleteMemeAPIError}\r\n                        />\r\n                     ))}\r\n                  </div>\r\n                  <div>\r\n                     {secondHalfMemes.map((meme) => (\r\n                        <Meme\r\n                           key={meme.id}\r\n                           meme={meme}\r\n                           deleteMemeAPI={deleteMemeAPI}\r\n                           deleteMemeAPIError={deleteMemeAPIError}\r\n                        />\r\n                     ))}\r\n                  </div>\r\n               </>\r\n            )}\r\n         </MemesContainer>\r\n      );\r\n   }\r\n}\r\n\r\nexport default Memes;\r\n","import tw, { styled } from \"twin.macro\";\r\n\r\nimport Button from \"../../../Common/components/Button\";\r\n\r\nexport const AppContainer = styled.div``;\r\n\r\nexport const FormAndMemesContainer = styled.div`\r\n   ${tw`\r\n        px-32px md:px-0 flex flex-col md:flex-row\r\n    `}\r\n   height: calc(100vh - 100px);\r\n`;\r\n\r\nexport const MemesContainer = styled.div`\r\n   ${tw`\r\n      w-full md:w-3/5 flex flex-col justify-center items-center\r\n   `}\r\n   height: calc(100vh - 100px);\r\n`;\r\n\r\nexport const GetMemesErrorMessage = styled.p`\r\n   ${tw`\r\n      text-center\r\n   `}\r\n`;\r\n\r\nexport const GetMemesTryAgainButton = styled(Button)``;\r\n","import XMemeHome from \"./XMemeHome\";\r\n\r\nexport default XMemeHome;\r\n","import React, { Component, ReactNode } from \"react\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport { ClipLoader } from \"react-spinners\";\r\n\r\nimport {\r\n   getParsedErrorMessage,\r\n   isFailed,\r\n   isFetching,\r\n} from \"../../../Common/utils/APIUtils\";\r\nimport { colors } from \"../../../Common/themes/colors\";\r\nimport Button from \"../../../Common/components/Button\";\r\n\r\nimport MemeStore from \"../../stores/MemeStore\";\r\n\r\nimport Header from \"../Header\";\r\nimport MemeForm from \"../MemeForm\";\r\nimport Memes from \"../Memes\";\r\n\r\nimport {\r\n   AppContainer,\r\n   FormAndMemesContainer,\r\n   GetMemesErrorMessage,\r\n   GetMemesTryAgainButton,\r\n   MemesContainer,\r\n} from \"./styledComponents\";\r\n\r\ninterface XMemeHomeProps {}\r\n\r\ninterface InjectedProps extends XMemeHomeProps {\r\n   memeStore: MemeStore;\r\n}\r\n\r\n@inject(\"memeStore\")\r\n@observer\r\nclass XMemeHome extends Component<XMemeHomeProps> {\r\n   componentDidMount() {\r\n      this.getMemes();\r\n   }\r\n\r\n   get injectedProps(): InjectedProps {\r\n      return this.props as InjectedProps;\r\n   }\r\n\r\n   get memeStore(): MemeStore {\r\n      const { memeStore } = this.injectedProps;\r\n      return memeStore;\r\n   }\r\n\r\n   getMemes = (): void => {\r\n      this.memeStore.getMemesAPI();\r\n   };\r\n\r\n   renderMemes = (): ReactNode => {\r\n      const {\r\n         getMemesAPIStatus,\r\n         getMemesAPIError,\r\n         memes,\r\n         deleteMemeAPI,\r\n         deleteMemeAPIError,\r\n      } = this.memeStore;\r\n      if (isFetching(getMemesAPIStatus)) {\r\n         return (\r\n            <MemesContainer>\r\n               <ClipLoader size={48} color={colors.blueWhale} />\r\n            </MemesContainer>\r\n         );\r\n      }\r\n      if (isFailed(getMemesAPIStatus)) {\r\n         return (\r\n            <MemesContainer>\r\n               <GetMemesErrorMessage>\r\n                  {getParsedErrorMessage(getMemesAPIError)}\r\n               </GetMemesErrorMessage>\r\n               <GetMemesTryAgainButton\r\n                  color={Button.colors.primary}\r\n                  onClick={this.getMemes}\r\n               >\r\n                  Retry\r\n               </GetMemesTryAgainButton>\r\n            </MemesContainer>\r\n         );\r\n      }\r\n      return (\r\n         <Memes\r\n            memes={memes}\r\n            deleteMemeAPI={deleteMemeAPI}\r\n            deleteMemeAPIError={deleteMemeAPIError}\r\n         />\r\n      );\r\n   };\r\n\r\n   render() {\r\n      return (\r\n         <AppContainer>\r\n            <Header />\r\n            <FormAndMemesContainer>\r\n               <MemeForm\r\n                  postMemeAPI={this.memeStore.postMemeAPI}\r\n                  postMemeAPIStatus={this.memeStore.postMemeAPIStatus}\r\n                  postMemeAPIError={this.memeStore.postMemeAPIError}\r\n                  editMemeAPI={this.memeStore.editMemeAPI}\r\n                  editMemeAPIStatus={this.memeStore.editMemeAPIStatus}\r\n                  editMemeAPIError={this.memeStore.editMemeAPIError}\r\n               />\r\n               {this.renderMemes()}\r\n            </FormAndMemesContainer>\r\n         </AppContainer>\r\n      );\r\n   }\r\n}\r\n\r\nexport default XMemeHome;\r\n","import tw, { styled } from \"twin.macro\";\r\n\r\nimport Button from \"../../../Common/components/Button\";\r\n\r\nexport const MemeContainer = styled.div`\r\n   ${tw`\r\n        flex flex-col pt-16px bg-white\r\n    `}\r\n   min-width: 250px;\r\n   min-height: 250px;\r\n`;\r\n\r\nexport const LoaderContainer = styled.div`\r\n   ${tw`\r\n        flex my-auto justify-center\r\n    `}\r\n`;\r\n\r\nexport const MemeBar = styled.div`\r\n   ${tw`\r\n        flex justify-end px-12px\r\n    `}\r\n`;\r\n\r\nexport const ErrorInfoContainer = styled.div`\r\n   ${tw`\r\n        flex flex-col my-auto items-center\r\n    `}\r\n`;\r\n\r\nexport const GetMemeErrorMessage = styled.p`\r\n   ${tw`\r\n        text-center\r\n    `}\r\n`;\r\n\r\nexport const GetMemeTryAgainButton = styled(Button)``;\r\n\r\nexport const CloseButton = styled(Button)`\r\n   ${tw`\r\n        p-0 m-0 shadow-none bg-transparent\r\n    `}\r\n   &:hover {\r\n      ${tw`\r\n            bg-transparent\r\n        `}\r\n   }\r\n`;\r\n\r\nexport const MemeOwnerName = styled.p`\r\n   ${tw`\r\n        font-bold m-0 p-0 mx-12px\r\n    `}\r\n`;\r\n\r\nexport const MemeCaption = styled.p`\r\n   ${tw`\r\n        font-semibold m-0 p-0 mt-2px mx-12px\r\n    `}\r\n`;\r\n\r\nexport const MemeImageContainer = styled.div`\r\n   ${tw`\r\n        flex mt-8px\r\n    `}\r\n`;\r\n\r\nexport const MemeImage = styled.img`\r\n   ${tw`\r\n        w-full object-cover\r\n    `}\r\n`;\r\n","import MemeModal from \"./MemeModal\";\r\n\r\nexport default MemeModal;\r\n","import React, { Component, ReactElement } from \"react\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport Modal from \"react-modal\";\r\nimport { reaction } from \"mobx\";\r\nimport { ClipLoader } from \"react-spinners\";\r\nimport { AiOutlineCloseCircle } from \"react-icons/ai\";\r\n\r\nimport notFoundLogo from \"../../../assets/img/404.svg\";\r\nimport Button from \"../../../Common/components/Button\";\r\nimport {\r\n   getParsedErrorMessage,\r\n   isFailed,\r\n   isFetching,\r\n} from \"../../../Common/utils/APIUtils\";\r\nimport { colors } from \"../../../Common/themes/colors\";\r\n\r\nimport UIStore from \"../../stores/UIStore\";\r\nimport MemeStore from \"../../stores/MemeStore\";\r\n\r\nimport \"./styles.css\";\r\nimport {\r\n   CloseButton,\r\n   ErrorInfoContainer,\r\n   GetMemeErrorMessage,\r\n   GetMemeTryAgainButton,\r\n   LoaderContainer,\r\n   MemeBar,\r\n   MemeCaption,\r\n   MemeContainer,\r\n   MemeImage,\r\n   MemeImageContainer,\r\n   MemeOwnerName,\r\n} from \"./styledComponents\";\r\n\r\ninterface MemeModalProps {}\r\n\r\ninterface InjectedProps extends MemeModalProps {\r\n   memeStore: MemeStore;\r\n   uiStore: UIStore;\r\n}\r\n\r\n@inject(\"uiStore\", \"memeStore\")\r\n@observer\r\nclass MemeModal extends Component {\r\n   componentWillUnmount() {\r\n      this.getMemeDetails();\r\n   }\r\n\r\n   get injectedProps(): InjectedProps {\r\n      return this.props as InjectedProps;\r\n   }\r\n\r\n   get memeStore(): MemeStore {\r\n      const { memeStore } = this.injectedProps;\r\n      return memeStore;\r\n   }\r\n\r\n   get uiStore(): UIStore {\r\n      const { uiStore } = this.injectedProps;\r\n      return uiStore;\r\n   }\r\n\r\n   getMemeDetailsAPI = (): void => {\r\n      const {\r\n         memeStore: { getMemeAPI },\r\n         uiStore: { memeId },\r\n      } = this.injectedProps;\r\n      getMemeAPI(memeId);\r\n   };\r\n\r\n   getMemeDetails = reaction(\r\n      () => {\r\n         const { showMemeModal } = this.uiStore;\r\n         return showMemeModal;\r\n      },\r\n      (showMemeModal: boolean) => {\r\n         if (showMemeModal) {\r\n            this.getMemeDetailsAPI();\r\n         }\r\n      }\r\n   );\r\n\r\n   closeMemeModal = (): void => {\r\n      const { updateMemeModalStatus } = this.uiStore;\r\n      const { clearSingleMeme } = this.memeStore;\r\n      clearSingleMeme();\r\n      updateMemeModalStatus(false);\r\n   };\r\n\r\n   renderMeme = observer(\r\n      (): ReactElement => {\r\n         const {\r\n            getMemeAPIStatus,\r\n            getMemeAPIError,\r\n            singleMeme,\r\n         } = this.memeStore;\r\n         console.log(getMemeAPIStatus);\r\n         if (isFetching(getMemeAPIStatus)) {\r\n            return (\r\n               <MemeContainer>\r\n                  <LoaderContainer>\r\n                     <ClipLoader size={48} color={colors.blueWhale} />\r\n                  </LoaderContainer>\r\n               </MemeContainer>\r\n            );\r\n         }\r\n         if (isFailed(getMemeAPIStatus)) {\r\n            return (\r\n               <MemeContainer>\r\n                  <MemeBar>\r\n                     <CloseButton onClick={this.closeMemeModal}>\r\n                        {<AiOutlineCloseCircle size={24} />}\r\n                     </CloseButton>\r\n                  </MemeBar>\r\n                  <ErrorInfoContainer>\r\n                     <GetMemeErrorMessage>\r\n                        {getParsedErrorMessage(getMemeAPIError)}\r\n                     </GetMemeErrorMessage>\r\n                     <GetMemeTryAgainButton\r\n                        color={Button.colors.primary}\r\n                        onClick={this.getMemeDetailsAPI}\r\n                     >\r\n                        Retry\r\n                     </GetMemeTryAgainButton>\r\n                  </ErrorInfoContainer>\r\n               </MemeContainer>\r\n            );\r\n         }\r\n         if (singleMeme) {\r\n            const { name, caption, url } = singleMeme;\r\n            return (\r\n               <MemeContainer>\r\n                  <MemeBar>\r\n                     <CloseButton onClick={this.closeMemeModal}>\r\n                        {<AiOutlineCloseCircle size={24} />}\r\n                     </CloseButton>\r\n                  </MemeBar>\r\n                  <MemeOwnerName>{name}</MemeOwnerName>\r\n                  <MemeCaption>{caption}</MemeCaption>\r\n                  <MemeImageContainer>\r\n                     <MemeImage\r\n                        alt={caption}\r\n                        src={url}\r\n                        onError={(event) => (event.target.src = notFoundLogo)}\r\n                     />\r\n                  </MemeImageContainer>\r\n               </MemeContainer>\r\n            );\r\n         }\r\n         return <></>;\r\n      }\r\n   );\r\n\r\n   render() {\r\n      const { showMemeModal } = this.uiStore;\r\n      const { renderMeme: RenderMeme } = this;\r\n      return (\r\n         <Modal\r\n            isOpen={showMemeModal}\r\n            onRequestClose={this.closeMemeModal}\r\n            className=\"meme-modal\"\r\n            overlayClassName=\"meme-overlay\"\r\n            closeTimeoutMS={300}\r\n            ariaHideApp={false}\r\n         >\r\n            <RenderMeme />\r\n         </Modal>\r\n      );\r\n   }\r\n}\r\n\r\nexport default MemeModal;\r\n","import React from \"react\";\r\nimport { Provider } from \"mobx-react\";\r\n\r\nimport stores from \"./Common/stores\";\r\nimport XMemeHome from \"./XMeme/components/XMemeHome\";\r\nimport MemeModal from \"./XMeme/components/MemeModal\";\r\n\r\nfunction App() {\r\n   return (\r\n      <Provider {...stores}>\r\n         <XMemeHome />\r\n         <MemeModal />\r\n      </Provider>\r\n   );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n   if (onPerfEntry && onPerfEntry instanceof Function) {\n      import(\"web-vitals\").then(\n         ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n         }\n      );\n   }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}